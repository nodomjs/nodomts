{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./core/application.ts","webpack:///./core/compiler.ts","webpack:///./core/directive.ts","webpack:///./core/directivefactory.ts","webpack:///./core/directivemanager.ts","webpack:///./core/element.ts","webpack:///./core/expression.ts","webpack:///./core/expressionfactory.ts","webpack:///./core/extend/directiveinit.ts","webpack:///./core/factory.ts","webpack:///./core/filter.ts","webpack:///./core/filterfactory.ts","webpack:///./core/filtermanager.ts","webpack:///./core/linker.ts","webpack:///./core/locales/msg_zh.ts","webpack:///./core/messagequeue.ts","webpack:///./core/methodfactory.ts","webpack:///./core/model.ts","webpack:///./core/modelfactory.ts","webpack:///./core/module.ts","webpack:///./core/modulefactory.ts","webpack:///./core/nodomerror.ts","webpack:///./core/nodomevent.ts","webpack:///./core/renderer.ts","webpack:///./core/router.ts","webpack:///./core/scheduler.ts","webpack:///./core/serializer.ts","webpack:///./core/util.ts"],"names":[],"mappings":"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","file":"./dist/nodom.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/// <reference path=\"nodom.ts\" />\nnamespace nodom{\n    /**\n     * 应用初始化配置类型\n     */\n    export interface IApplicationCfg{\n        /**\n         * 应用全局配置，{routerPrePath:路由前置配置,templatePath:模版路径位置,renderTick:调度器间隔时间(ms)，如果支持requestAnimationFrame，则不需要}\n         */\n        global:object;\n        /**\n         * 主模块配置\n         */\n        module:IModuleCfg;\n    }\n    /**\n     * 应用类\n     */\n    export class Application{\n        /**\n         * 路由前置路径，对所有路由路径有效\n         */\n        static routerPrePath:string;\n        /**\n         * 应用文件所在基础路径\n         */\n        static templatePath:string;\n        /**\n         * 调度器执行间隔，如果支持requestAnimationFrame，则不需要\n         */\n        static renderTick:number;\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 编译器，负责模版的编译\n     * @since 1.0\n     */\n    export class Compiler {\n        /**\n         * 编译\n         * @param element   待编译element\n         * @return          虚拟element\n         */\n        static compile(module:Module, elementStr:string) {\n            const div = Util.newEl('div');\n            div.innerHTML = elementStr;\n            let oe = new Element();\n            oe.root = true;\n            //调用编译\n            for (let i = 0; i < div.childNodes.length; i++) {\n                this.compileDom(module, div.childNodes[i], oe);\n            }\n\n            return oe;\n        }\n\n        /**\n         * 编译dom\n         * @param module        模块\n         * @param ele           待编译element\n         * @param parent        父节点（virtualdom）   \n         */\n\n        static compileDom(module:Module, ele:Node, parent:Element) {\n            const me = this;\n            let oe = new Element();\n            //注视标志\n            let isComment = false;\n            switch (ele.nodeType) {\n            case Node.ELEMENT_NODE: //元素\n                let el:HTMLElement = <HTMLElement>ele;\n                oe.tagName = el.tagName;\n                //遍历attributes\n                for (let i = 0; i < el.attributes.length; i++) {\n                    let attr = el.attributes[i];\n                    let v = attr.value.trim();\n                    if (attr.name.startsWith('x-')) { //指令\n                        //添加到dom指令集\n                        oe.directives.push(new Directive(attr.name.substr(2), v, oe, module, el));\n                    } else if (attr.name.startsWith('e-')) { //事件\n                        let en = attr.name.substr(2);\n                        oe.events[en] = new NodomEvent(en, attr.value.trim());\n                    } else {\n                        let isExpr = false;\n                        if (v !== '') {\n                            let ra = me.compileExpression(module, v);\n                            if (Util.isArray(ra)) {\n                                oe.exprProps[attr.name] = ra;\n                                isExpr = true;\n                            }\n                        }\n                        if (!isExpr) {\n                            oe.props[attr.name] = v;\n                        }\n                    }\n                }\n                let subEls = [];\n                //子节点编译\n                ele.childNodes.forEach((nd:Node)=> {\n                    subEls.push(me.compileDom(module, nd, oe));\n                });\n\n                //指令按优先级排序\n                oe.directives.sort((a, b) => {\n                    return DirectiveManager.getType(a.type).prio - DirectiveManager.getType(b.type).prio;\n                });\n                break;\n            case Node.TEXT_NODE: //文本节点\n                let txt = ele.textContent;\n                if (txt === \"\") { //内容为空不加入树\n                    return;\n                }\n                let expA = me.compileExpression(module, txt);\n                if (typeof expA === 'string') { //无表达式\n                    oe.textContent = expA;\n                } else { //含表达式\n                    oe.expressions = expA;\n                }\n                break;\n            case Node.COMMENT_NODE: //注释\n                isComment = true;\n                break;\n            }\n\n            //添加到子节点,comment节点不需要    \n            if (!isComment && parent) {\n                parent.children.push(oe);\n            }\n            return oe;\n        }\n\n\n        /**\n         * 处理含表达式串\n         * @param exprStr   含表达式的串\n         * @return          处理后的字符串和表达式数组\n         */\n        static compileExpression(module, exprStr) {\n            if (/\\{\\{.+?\\}\\}/.test(exprStr) === false) {\n                return exprStr;\n            }\n            let reg = /\\{\\{.+?\\}\\}/g;\n            let retA = new Array();\n            let re, oIndex = 0;\n            while ((re = reg.exec(exprStr)) !== null) {\n                let ind = re.index;\n                //字符串\n                if (ind > oIndex) {\n                    let s = exprStr.substring(oIndex, ind);\n                    retA.push(s);\n                }\n\n                //实例化表达式对象\n                let exp = new Expression(re[0].substring(2, re[0].length - 2), module);\n                //加入工厂\n                module.expressionFactory.add(exp.id, exp);\n                retA.push(exp.id);\n                oIndex = ind + re[0].length;\n            }\n            //最后的字符串\n            if (re && re.index + re[0].length < exprStr.length - 1) {\n                retA.push(exprStr.substr(re.index + re[0].length));\n            }\n            return retA;\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 指令类\n     */\n    export class Directive {\n\t\t/**\n\t\t * 指令id\n\t\t */\n\t\tid:number;\n\n        /**\n\t\t * 指令类型，指令管理器中定义\n\t\t */\n\t\ttype:string;\n        /**\n         * 优先级，越小优先级越高\n         */\n        prio:number;\n\t\t/**\n\t\t * 指令值\n\t\t */\n\t\tvalue:any;\n\n\t\t/**\n\t\t * 指令对应模块\n\t\t */\n\t\tmodule:Module;\n\n\t\t/**\n\t\t * 编译时执行方法\n\t\t */\n\t\tinit:Function;\n\n\t\t/**\n\t\t * 渲染时执行方法\n\t\t */\n\t\thandler:Function;\n        \n        /**\n         * 过滤器\n         */\n        filter:Filter;\n        /**\n         * 附加参数\n         */\n        params:any;\n        /**\n         * 构造方法\n         * @param type  \t类型\n         * @param value \t指令值\n         * @param vdom \t\t指令所属虚拟dom\n         * @param module \t模块\t\n         * @param el \t\t指令所属html element\n         */\n        constructor(type:string, value:string, vdom:Element, module:Module, el?:HTMLElement) {\n\t\t\tthis.id = Util.genId();\n\t\t\tthis.type = type;\n            if (Util.isString(value)) {\n                this.value = value.trim();\n            }\n            if (type !== undefined) {\n                Util.apply(DirectiveManager.init, DirectiveManager, [this, vdom, module, el]);\n            }\n        }\n\n        /**\n         * 执行\n         * @param value \t指令值\n         * @returns \t\t指令结果\n         */\n        exec(value) {\n            let args:Array<any> = [this.module, this.type, value];\n            return Util.apply(DirectiveManager.exec, DirectiveManager, args);\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom{\n    /**\n     * 指令工厂\n     */\n    export class DirectiveFactory extends Factory{\n        \n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 指令管理器\n     */\n    export class DirectiveManager {\n        /**\n         * 指令类型集合\n         */\n        static directiveTypes:Map<string,Directive> = new Map();\n        /**\n         * 不可编辑(被新类型替换)类型\n         */\n        static cantEditTypes:Array<string> = ['model','repeat','if','else','show','class','field'];\n        /**\n         * 创建指令类型\n         * @param name \t\t    指令类型名\n         * @param config \t    配置对象{order:优先级,init:初始化函数,handler:渲染处理函数}\n         * @param replacable    是否可编辑\n         */\n        static addType(name:string, config:any,replacable?:boolean) {\n            if (this.directiveTypes.has(name)) {\n                throw new NodomError('exist1', TipWords.directiveType, name);\n            }\n            if (!Util.isObject(config)) {\n                throw new NodomError('invoke', 'DirectiveManager.addType','1', 'Function');\n            }\n            //默认优先级10\n            config.prio = config.prio || 10;\n            if(replacable && !this.cantEditTypes.includes(name)){\n                this.cantEditTypes.push(name);\n            }\n            this.directiveTypes.set(name, config);\n        }\n\n        /**\n         * 移除过滤器类型\n         * @param name  过滤器类型名\n         */\n        static removeType(name:string) {\n            if (this.cantEditTypes.indexOf(name) !== -1) {\n                throw new NodomError('notupd', TipWords.system + TipWords.directiveType, name);\n            }\n            if (!this.directiveTypes.has(name)) {\n                throw new NodomError('notexist1', TipWords.directiveType, name);\n            }\n            this.directiveTypes.delete(name);\n        }\n\n        /**\n         * 获取类型\n         * @param name  指令类型名\n         * @returns     指令或undefined\n         */\n        static getType(name:string) {\n            return this.directiveTypes.get(name);\n        }\n\n        /**\n         * 是否有某个过滤器类型\n         * @param type \t\t过滤器类型名\n         * @returns \t\ttrue/false\n         */\n        static hasType(name:string) {\n            return this.directiveTypes.has(name);\n        }\n\n        /**\n         * 指令初始化\n         */\n        static init(directive:Directive, dom:Element, module:Module, el:HTMLElement) {\n            let dt = this.directiveTypes.get(directive.type);\n            if (dt === undefined) {\n                throw new NodomError('notexist1', TipWords.directiveType, name);\n            }\n            return dt.init(directive, dom, module, el);\n        }\n\n        /**\n         * 执行指令\n         * @param directive     指令\n         * @param dom           虚拟dom\n         * @param module        模块\n         * @param parent        父dom\n         * @returns             指令执行结果\n         */\n        static exec(directive:Directive, dom:Element, module:Module, parent:Element) {\n            if (!this.directiveTypes.has(directive.type)) {\n                throw new NodomError('notexist1', TipWords.directiveType, directive.type);\n            }\n\n            //调用\n            return Util.apply(this.directiveTypes.get(directive.type).handler, null, [directive,dom,module,parent]);\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n\t * 属性\n\t */\n\texport class Property{\n\t\t/**\n\t\t * 属性名\n\t\t */\n\t\tname:string;\n\t\t/**\n\t\t * 值，可以是字符串、数字、bool或表达式数组\n\t\t */\n\n\t\tvalue:any;\n\t\t/**\n\t\t * @param name \t\t属性名\n\t\t * @param value \t属性值\n\t\t */\n\t\tconstructor(name:string,value:any){\n\t\t\tthis.name = name;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t/**\n\t\t * 类型 0:常规属性 1:表达式属性\n\t\t */\n\t\ttype:number;\n    }\n    \n    /**\n     * 改变的dom类型\n     */\n    export class ChangedDom{\n        /**\n         * 改变方式\n         */\n        type: string;\n        /**\n         * 改变的节点\n         */\n        node: Element;\n        /**\n         * 父虚拟dom\n         */\n        parent: Element;\n        /**\n         * 在父节点中的位置\n         */\n        index:number;\n\n        /**\n         * 改变的属性数组\n         */\n        changeProps:Array<Property>;\n\n        /**\n         * 移除的属性数组\n         */\n        removeProps:Array<Property>;\n\n        /**\n         * \n         * @param node      虚拟节点\n         * @param type      修改类型  add(添加节点),del(删除节点),upd(更新节点),rep(替换节点),text(修改文本内容)\n         * @param parent    父虚拟dom\n         * @param index     在父节点中的位置索引\n         */\n        constructor(node?:Element,type?:string,parent?:Element,index?:number){\n            this.node = node;\n            this.type = type;\n            this.parent = parent;\n            this.index = index;\n        }\n    }\n    /**\n     * 虚拟dom\n     */\n    export class Element {\n\t\t/**\n\t\t * key，全局唯一\n\t\t */\n\t\tkey:string;\n\n        /**\n         * 是不是虚拟dom跟节点\n         */\n        root:boolean;\n\t\t/**\n\t\t * 绑定的模型id，如果没有，则从父继承\n\t\t */\n\t\tmodelId:number;\n\t\t/**\n\t\t * element为textnode时有效\n\t\t */\n\t\ttextContent:string|HTMLElement|HTMLFrameElement;\n\n\t\t/**\n\t\t * 类型，包括: html fragment 或 html element \n\t\t */\n\t\ttype:string;\n\n\t\t/**\n\t\t * 指令集\n\t\t */\n\t\tdirectives:Array<Directive> = [];\n\t\t/**\n\t\t * 属性集合\n\t\t */\n\t\tprops:Map<string,Property> = new Map();\n\t\t/**\n\t\t * 含表达式的属性集合\n\t\t */\n\t\texprProps:Map<string,Property> = new Map();\n\n\t\t/**\n\t\t * 事件集合\n\t\t */\n\t\tevents:Array<NodomEvent>;\n\n\t\t/**\n\t\t * 表达式集合\n\t\t */\n\t\texpressions:Array<Expression>;\n\t\t\n\t\t/**\n\t\t * 修改后的属性(单次渲染周期内)\n\t\t */\n\t\tchangeProps:Array<Property> = []; //\n\t\t/**\n\t\t * 待删除属性(单次渲染周期内)\n\t\t */\n\t\tremoveProps:Array<Property> = [];\n\t\t/**\n\t\t * 子element\n\t\t */\n\t\tchildren:Array<Element> = [];\n\t\t/**\n\t\t * 父element key\n\t\t */\n\t\tparentKey:string;\n\n\t\t/**\n\t\t * 父虚拟dom\n\t\t */\n\t\tparent:Element;\n\t\t/**\n\t\t * 标签名，如div\n\t\t */\n        tagName:string;\n\t\t/**\n\t\t * 不渲染标志，单次渲染有效\n\t\t */\n\t\tdontRender:boolean = false;\n\t\t/**\n\t\t * 是否找到（dom比较时使用）\n\t\t */\n\t\tfinded:boolean;\n\t\t/**\n\t\t * @param tag 标签名\n\t\t */\n        constructor(tag?:string) {\n            this.tagName = tag; //标签\n            this.key = Util.genId()+'';\n        }\n\n        /**\n         * 渲染到virtualdom树\n         * @param module \t模块\n         * @param parent \t父节点\n         */\n        render(module:Module, parent?:Element) {\n            // 设置父对象\n            if (parent) {\n                this.parentKey = parent.key;\n                // 设置modelId\n                if (!this.modelId) {\n                    this.modelId = parent.modelId;\n                }\n            }\n            if (this.tagName !== undefined) { //element\n                this.handleProps(module);\n                //某些指令可能会终止渲染，如果返回false，则不继续渲染\n                this.handleDirectives(module, parent);\n            } else { //textContent\n                this.handleTextContent(module);\n            }\n\n            //dontrender 为false才渲染子节点\n            if (!this.dontRender) {\n                //子节点渲染\n                for (let i = 0; i < this.children.length; i++) {\n                    let item = this.children[i];\n                    item.render(module, this);\n                    //dontRender 删除\n                    if (item.dontRender) {\n                        this.removeChild(item);\n                        i--;\n                    }\n                }\n            }\n            return true;\n        }\n        /**\n         * 渲染到html element\n         * @param module \t模块\n         * @param params \t配置对象{}\n         * @param type \t\t类型\n         * @param parent \t父虚拟dom\n         */\n        renderToHtml(module:Module, params:any) {\n\t\t\tlet el:HTMLElement;\n\t\t\tlet el1:Node;\n            let type = params.type;\n            let parent = params.parent;\n            //构建el\n            if (!parent) {\n                el = module.container;\n            } else {\n                if (type === 'fresh' || type === 'add' || type === 'text') {\n                    el = module.container.querySelector(\"[key='\" + parent.key + \"']\")\n                } else if (this.tagName !== undefined) { //element节点才可以查找\n                    el = module.container.querySelector(\"[key='\" + this.key + \"']\");\n                }\n            }\n            if (!el) {\n                return;\n            }\n\n            switch (type) {\n            case 'fresh': //首次渲染\n                if (this.tagName) {\n                    el1 = newEl(this, null, el);\n                    //首次渲染需要生成子孙节点\n                    genSub(el1, this);\n                } else {\n                    el1 = newText(<string>this.textContent, this);\n                }\n                el.appendChild(el1);\n                break;\n            case 'text': //文本更改\n                if (!parent || !parent.children) {\n                    break;\n                }\n\n                let ind = parent.children.indexOf(this);\n                if (ind !== -1) {\n                    //element或fragment\n                    if (this.type === 'html') {\n\t\t\t\t\t\tlet div:HTMLElement = document.querySelector(\"[key='\" + this.key + \"']\");\n                    \n\t\t\t\t\t\tif (div !== null) {\n\t\t\t\t\t\t\tdiv.innerHTML = '';\n\t\t\t\t\t\t\tdiv.appendChild(<HTMLElement>this.textContent);\n                        } else {\n                            let div:Node = newText(<string>this.textContent);\n                            Util.replaceNode(el.childNodes[ind], div);\n                        }\n                    } else {\n                        el.childNodes[ind].textContent = <string>this.textContent;\n                    }\n                }\n                break;\n            case 'upd': //修改属性\n                //删除属性\n                if (params.removeProps) {\n\t\t\t\t\tparams.removeProps.forEach((p) => {\n                        el.removeAttribute(p.name);\n                    });\n                }\n                //修改属性\n                params.changeProps.forEach((p) => {\n                    if (el.tagName === 'INPUT' && p.name === 'value') { //文本框单独处理\n                        (<HTMLInputElement>el).value = p.value;\n                    } else {\n                        el.setAttribute(p.name, p.value);\n                    }\n                });\n                break;\n            case 'rep': //替换节点\n                el1 = newEl(this, parent);\n                Util.replaceNode(el, el1);\n                break;\n            case 'add': //添加\n                if (this.tagName) {\n                    el1 = newEl(this, parent, el);\n                    genSub(el1, this);\n                } else {\n                    el1 = newText(this.textContent);\n                }\n                if (params.index === el.childNodes.length) {\n                    el.appendChild(el1);\n                } else {\n                    el.insertBefore(el1, el.childNodes[params.index]);\n                }\n            }\n\n            /**\n\t\t\t * 新建element节点\n\t\t\t * @param vdom \t\t虚拟dom\n\t\t\t * @param parent \t父虚拟dom\n\t\t\t * @param parentEl \t父element\n\t\t\t * @returns \t\t新的html element\n\t\t\t */\n            function newEl(vdom:Element, parent:Element, parentEl?:Node):HTMLElement {\n                //创建element\n                let el = document.createElement(vdom.tagName);\n\t\t\t\t//设置属性\n\t\t\t\tfor(let d of vdom.props){\n\t\t\t\t\tel.setAttribute(d[1].name, d[1].value);\n\t\t\t\t}\n                \n                el.setAttribute('key', vdom.key);\n                vdom.handleEvents(module, el, parent, parentEl);\n                return el;\n            }\n\n            /**\n             * 新建文本节点\n             */\n            function newText(text:string|HTMLElement|DocumentFragment, dom?:Element) {\n                if (dom && 'html' === dom.type) { //html fragment 或 element\n                    let div = Util.newEl('div');\n                    div.setAttribute('key', dom.key);\n                    div.appendChild(<HTMLElement>text);\n                    return div;\n                } else {\n                    return document.createTextNode(<string>text);\n                }\n            }\n\n            /**\n             * 生成子节点\n             * @param pEl \t父节点\n             * @param vNode 虚拟dom父节点\t\n             */\n            function genSub(pEl:Node, vNode:Element) {\n                if (vNode.children && vNode.children.length > 0) {\n                    vNode.children.forEach((item) => {\n                        let el1;\n                        if (item.tagName) {\n                            el1 = newEl(item, vNode, pEl);\n                            genSub(el1, item);\n                        } else {\n                            el1 = newText(item.textContent, item);\n                        }\n                        pEl.appendChild(el1);\n                    });\n                }\n            }\n\n        }\n\n        /**\n         * 克隆\n         */\n        clone() {\n            let dst = new Element();\n\n            //简单属性\n\t\t\tUtil.getOwnProps(this).forEach((p) => {\n                if (typeof this[p] !== 'object') {\n                    dst[p] = this[p];\n                }\n            });\n\n\t\t\tfor(let d of this.directives){\n\t\t\t\tdst.directives.push(d);\n\t\t\t}\n\t\t\t//普通属性\n            for(let d of this.props){\n\t\t\t\tdst.props.set(d[0],d[1]);\n\t\t    }\n\n            //表达式属性\n            for(let d of this.exprProps){\n\t\t\t\tdst.exprProps.set(d[0],d[1]);\n\t\t    }\n\n            //事件\n\t\t\tfor(let d of this.events){\n\t\t\t\tdst.events.push(d);\n\t\t    }\n\t\t\t\n            //表达式\n            dst.expressions = this.expressions;\n\n            this.children.forEach((d) => {\n                dst.children.push(d.clone());\n            });\n            return dst;\n        }\n\n        /**\n         * 处理指令\n         * \n         */\n        handleDirectives(module, parent) {\n            const me = this;\n            if (this.dontRender) {\n                return false;\n            }\n            const dirs = this.directives;\n            for (let i = 0; i < dirs.length && !this.dontRender; i++) {\n                DirectiveManager.exec(dirs[i], me, module, parent);\n            }\n            return true;\n        }\n\n\n\n        /**\n         * 表达式预处理，添加到expression计算队列\n         */\n        handleExpression(exprArr, module) {\n            const me = this;\n            if (this.dontRender) {\n                return;\n            }\n            let value = '';\n            let model = module.modelFactory.get(this.modelId);\n            exprArr.forEach((v) => {\n                if (typeof v === 'number') { //处理表达式\n                    // 统一添加到表达式计算队列\n                    let v1 = module.expressionFactory.get(v).val(model);\n                    //html或 fragment\n                    if (v1 instanceof DocumentFragment || Util.isEl(v1)) {\n                        // 设置类型\n                        this.type = 'html';\n                        return v1;\n                    }\n                    value += v1;\n                } else {\n                    value += v;\n                }\n            });\n            return value;\n        }\n\n        /**\n         * 处理属性（带表达式）\n         */\n        handleProps(module) {\n            const me = this;\n            if (this.dontRender) {\n                return;\n            }\n            Util.getOwnProps(this.exprProps).forEach((item) => {\n                //属性值为数组，则为表达式\n                if (Util.isArray(this.exprProps[item])) {\n                    this.props[item] = this.handleExpression(this.exprProps[item], module);\n                } else if (this.exprProps[item] instanceof Expression) { //单个表达式\n                    this.props[item] = this.exprProps[item].val(module.modelFactory.get(this.modelId));\n                }\n            });\n        }\n\n        /**\n         * 处理文本（表达式）\n         */\n        handleTextContent(module) {\n            const me = this;\n            if (this.dontRender) {\n                return;\n            }\n            if (this.expressions !== undefined) {\n                this.textContent = this.handleExpression(this.expressions, module);\n            }\n        }\n\n        /**\n         * 处理事件\n         * @param module \n         * @param model\n         * @param el\n         * @param parent\n         */\n        handleEvents(module, el, parent, parentEl) {\n            const me = this;\n\n            if (this.events.length === 0) {\n                return;\n            }\n\n            this.events.forEach((ev) => {\n                if (ev.delg && parent) { //代理到父对象\n                    ev.delegateTo(module, me, el, parent, parentEl);\n                } else {\n                    ev.bind(module, me, el);\n                }\n            });\n        }\n\n        /**\n         * 移除指令\n         * @param directives \t待删除的指令集\n         */\n        removeDirectives(delDirectives) {\n            const me = this;\n            for (let i = this.directives.length - 1; i >= 0; i--) {\n                let d = this.directives[i];\n                for (let j = 0; j < delDirectives.length; j++) {\n                    if (d.type === delDirectives[j]) {\n                        this.directives.splice(i, 1);\n                    }\n                }\n            }\n        }\n\n        /**\n         * 是否有某个类型的指令\n         * @param directiveType \t指令类型名\n         * @return true/false\n         */\n        hasDirective(directiveType) {\n            const me = this;\n            for (let i = 0; i < this.directives.length; i++) {\n                if (this.directives[i].type === directiveType) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         * 获取某个类型的指令\n         * @param directiveType \t指令类型名\n         * @return directive\n         */\n        getDirective(directiveType) {\n            const me = this;\n            for (let i = 0; i < this.directives.length; i++) {\n                if (this.directives[i].type === directiveType) {\n                    return this.directives[i];\n                }\n            }\n        }\n\n        /**\n         * 添加子节点\n         * @param dom \t子节点\n         */\n        add(dom) {\n            this.children.push(dom);\n        }\n        /**\n         * 从虚拟dom树和html dom树删除自己\n         * @param module \t模块\n         * @param delHtml \t是否删除html element\n         */\n        remove(module:Module, delHtml?:boolean) {\n            // 从父树中移除\n            if (this.parentKey !== undefined) {\n                let p = module.renderTree.query(this.parentKey);\n                if (p) {\n                    p.removeChild(this);\n                }\n            }\n\n            // 删除html dom节点\n            if (delHtml && module && module.container) {\n                let el = module.container.querySelector(\"[key='\" + this.key + \"']\");\n                if (el !== null) {\n                    Util.remove(el);\n                }\n            }\n        }\n\n\n        /**\n         * 从html删除\n         */\n        removeFromHtml(module:Module) {\n            let el = module.container.querySelector(\"[key='\" + this.key + \"']\");\n            if (el !== null) {\n                Util.remove(el);\n            }\n        }\n\n        /**\n         * 移除子节点\n         */\n        removeChild(dom:Element) {\n            let ind:number;\n            // 移除\n            if (Util.isArray(this.children) && (ind = this.children.indexOf(dom)) !== -1) {\n                this.children.splice(ind, 1);\n            }\n        }\n\n        /**\n         * 替换目标节点\n         * @param dst \t目标节点　\n         */\n        replace(dst:Element) {\n            if (!dst.parent) {\n                return false;\n            }\n            let ind = dst.parent.children.indexOf(dst);\n            if (ind === -1) {\n                return false;\n            }\n            //替换\n            dst.parent.children.splice(ind, 1, this);\n            return true;\n        }\n\n        /**\n         * 是否包含节点\n         * @param dom \t包含的节点 \n         */\n        contains(dom) {\n            const me = this;\n            for (; dom !== undefined && dom !== me; dom = dom.parent);\n            return dom !== undefined;\n        }\n\n        /**\n         * 查找子孙节点\n         * @param key \telement key\n         * @returns\t\t虚拟dom/undefined\n         */\n        query(key:string) {\n            const me = this;\n            if (this.key === key) {\n                return me;\n            }\n            for (let i = 0; i < this.children.length; i++) {\n                let dom = this.children[i].query(key);\n                if (dom) {\n                    return dom;\n                }\n            }\n        }\n\n\t\t\n        /**\n         * 比较节点\n         * @param dst \t待比较节点\n         * @returns\t{type:类型 text/rep/add/upd,node:节点,parent:父节点, \n         * \t\t\tchangeProps:改变属性,[prop1,prop2,...],removeProps:删除属性,[prop1,prop2,...]}\n         */\n        compare(dst:Element, retArr:Array<ChangedDom>, parentNode?:Element) {\n            if (!dst) {\n                return;\n            }\n            let re:ChangedDom = new ChangedDom();\n            let change:boolean = false;\n\n            if (this.tagName === undefined) { //文本节点\n                if (dst.tagName === undefined) {\n                    if (this.textContent !== dst.textContent) {\n                        re.type = 'text';\n                        change = true;\n                    }\n                } else { //节点类型不同\n                    re.type = 'rep';\n                    change = true;\n                }\n            } else { //element节点\n                if (this.tagName !== dst.tagName) { //节点类型不同\n                    re.type = 'rep';\n                    change = true;\n                } else { //节点类型相同，可能属性不同\n                    //检查属性，如果不同则放到changeProps\n                    re.changeProps = [];\n                    //待删除属性\n                    re.removeProps = [];\n\n\t\t\t\t\t//删除或增加的属性的属性\n\t\t\t\t\tfor(let d of dst.props){\n\t\t\t\t\t\tif (!this.props.has(d[0])) {\n                            re.removeProps.push(d[1]);\n                        }\n\t\t\t\t\t}\n                    \n\t\t\t\t\t//修改后的属性\n\t\t\t\t\tfor(let d of this.props){\n\t\t\t\t\t\tlet p:Property = d[1];\n\t\t\t\t\t\tlet p1 = dst.props.get(d[0]);\n\t\t\t\t\t\tif (!p1 || p.value !== p1) {\n                            re.changeProps.push(p);\n                        }\n\t\t\t\t\t}\n\t\t\t\t\t\n                    if (re.changeProps.length > 0 || re.removeProps.length > 0) {\n                        change = true;\n                        re.type = 'upd';\n                    }\n                }\n            }\n            //改变则加入数据\n            if (change) {\n                re.node = this;\n                if (parentNode) {\n                    re.parent = parentNode;\n                }\n                retArr.push(re);\n            }\n\n            //子节点处理\n            if (!this.children || this.children.length === 0) {\n                // 旧节点的子节点全部删除\n                if (dst.children && dst.children.length > 0) {\n                    dst.children.forEach((item) => {\n                        retArr.push(new ChangedDom(item,'del'));\n                    });\n                }\n            } else {\n                //全部新加节点\n                if (!dst.children || dst.children.length === 0) {\n                    this.children.forEach((item) => {\n                        retArr.push(new ChangedDom(item,'add',this));\n                    });\n                } else { //都有子节点\n                    this.children.forEach((dom1, ind) => {\n                        let dom2:Element = dst.children[ind];\n                        // dom1和dom2相同key\n                        if (!dom2 || dom1.key !== dom2.key) {\n                            dom2 = undefined;\n                            //找到key相同的节点\n                            for (let i = 0; i < dst.children.length; i++) {\n                                //找到了相同key\n                                if (dom1.key === dst.children[i].key) {\n                                    dom2 = dst.children[i];\n                                    break;\n                                }\n                            }\n                        }\n                        if (dom2 !== undefined) {\n                            dom1.compare(dom2, retArr, this);\n                            //设置匹配标志，用于后面删除没有标志的节点\n                            dom2.finded = true;\n                        } else {\n                            // dom1为新增节点\n                            retArr.push(new ChangedDom(dom1,'add',this,ind));\n                        }\n                    });\n\n                    //未匹配的节点设置删除标志\n                    if (dst.children && dst.children.length > 0) {\n                        dst.children.forEach((item) => {\n                            if (!item.finded) {\n                                retArr.push(new ChangedDom(item,'del',dst));\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n\t * 堆栈Item\n\t */\n\tinterface IStatckItem{\n\t\t/**\n\t\t * item类型\n\t\t */\n\t\ttype: string,\n\n\t\t/**\n\t\t * 值\n\t\t */\n\t\tval: any,\n\n\t\t/**\n\t\t * 参数数组\n\t\t */\n\t\tparams?: Array<any>;\n\n\t\t/**\n\t\t * 过滤器\n\t\t */\n\t\tfilter?:Filter;\n\t}\n\n\t/**\n\t * 表达式类\n\t */\n    export class Expression {\n\t\t/**\n\t\t * 表达式id\n\t\t */\n\t\tid:number;\n\n\t\t/**\n\t\t * 模块名\n\t\t */\n\t\tmoduleName:string;\n\n\t\t/**\n\t\t * 堆栈数组\n\t\t */\n\t\tstack:Array<IStatckItem>;\n\n\t\t/**\n\t\t * 字段数组\n\t\t */\n\t\tfields:Array<string>;\n\n\t\t/**\n\t\t * 一个expression可能被多次使用，以modelid进行区分，针对不同的模型id构建对象{modelId:{fieldValue:,value:}\n\t\t */\n\t\tmodelMap:object={};\n\n\t\t/**\n\t\t * 前置expressionId数组\n\t\t */\n\t\tpre:Array<number>;\n\n        /**\n         * @param exprStr\t表达式串\n\t\t * @param module \t模块\n         */\n        constructor(exprStr:string, module:Module) {\n            //旧值\n            this.fields = []; // 字段数组\n            this.id = Util.genId();\n            if (module) {\n                this.moduleName = module.name;\n                module.expressionFactory.add(this.id, this);\n            }\n\n            if (exprStr) {\n                this.stack = this.init(exprStr);\n            }\n        }\n\n        /**\n         * 初始化，把表达式串转换成堆栈\n         * @param exprStr \t表达式串\n\t\t * @returns \t\t堆栈数组\n         */\n        init(exprStr:string):Array<IStatckItem> {\n            //字符串开始\n            let startStr:string;\n            let type:number = 0; // 1字符串 2变量 3函数 4过滤器\n            //字符串开始结束符\n            let strings:string = \"'`\\\"\";\n            //运算符\n            let operand:string = \"()!|*/+-><=&%\";\n            let spaceChar:string = \" \t\";\n            //堆栈\n\t\t\tlet stack:Array<IStatckItem>=[];\n\t\t\tlet sTmp:string = '';\n            for (let i = 0; i < exprStr.length; i++) {\n                let c:string = exprStr[i];\n                //变量和函数的空格不处理\n                if ((type !== 1) && spaceChar.indexOf(c) !== -1) {\n                    continue;\n                }\n                switch (type) {\n                case 1: //当前为字符串\n                    //字符串标识\n                    if (strings.indexOf(c) !== -1) {\n                        if (c === startStr) {\n                            this.addStr(sTmp + c, stack);\n                            startStr = undefined;\n                            sTmp = '';\n                            type = 0;\n                            continue;\n                        }\n                    }\n                    break;\n                case 2: //当前为变量\n                    if (operand.indexOf(c) !== -1) {\n                        //转为函数\n                        if (c === '(') {\n                            type = 3;\n                        } else { //变量结束\n                            this.addVar(sTmp, stack);\n                            sTmp = '';\n                            type = 0;\n                        }\n                    }\n                    break;\n                case 3: //当前为函数\n                    if (c === ')') {\n                        let a:Array<string> = sTmp.trim().split('(');\n                        //函数名\n                        let fn:string = a[0];\n\n                        //参数\n                        let pa = a[1].split(',');\n                        for (let j = 0; j < pa.length; j++) {\n                            let field = pa[j].trim();\n                            pa[j] = field;\n\n                            // 添加字段到集合 \n                            this.addField(field);\n                        }\n\n                        //函数入栈\n                        stack.push({\n                            val: fn,\n                            params: pa,\n                            type: 'function'\n                        });\n                        sTmp = '';\n                        type = 0;\n                        continue;\n                    }\n                    break;\n                default:\n                    //字符串开始\n                    if (strings.indexOf(c) !== -1) {\n                        startStr = c;\n                        type = 1;\n                    } else if (operand.indexOf(c) === -1) { //变量开始\n                        type = 2;\n                        if (sTmp !== '') {\n                            this.addStr(sTmp, stack);\n                            sTmp = '';\n                        }\n                    }\n                }\n\n                //过滤器标志\n                let isFilter:boolean = false;\n                //过滤器\n                if (c === '|') {\n                    let j = i + 1;\n                    let nextc:string = exprStr[j];\n                    if (nextc >= 'a' && nextc <= 'z') {\n                        let strCh = '';\n                        for (; j < exprStr.length; j++) {\n                            let ch = exprStr[j];\n                            if (strings.indexOf(ch) !== -1) {\n                                if (ch === strCh) { //字符串结束\n                                    strCh = '';\n                                } else {\n                                    strCh = ch;\n                                }\n\n                            }\n                            //遇到操作符且不在字符串内\n                            if (strCh === '' && operand.indexOf(ch) !== -1) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (j > i) {\n                        let s:string = exprStr.substring(i + 1, j);\n                        if (s !== '') {\n                            // 过滤器串处理\n                            let filterArr:string[] = FilterManager.explain(s);\n                            //过滤器\n                            if (FilterManager.hasType(filterArr[0])) {\n                                this.addFilter(filterArr, stack);\n                                c = '';\n                                exprStr = '';\n                                isFilter = true;\n                            }\n                        }\n                    }\n                }\n\n                //操作符\n                if (!isFilter && type !== 1 && type !== 3 && operand.indexOf(c) !== -1) {\n                    this.addOperand(c, stack);\n                } else {\n                    sTmp += c;\n                }\n            }\n            if (type === 2) { //变量处理\n                this.addVar(sTmp, stack);\n            } else if (type === 0 && sTmp !== '') { //字符串\n                this.addStr(sTmp, stack);\n            } else if (type !== 0) {\n                //抛出表达式错误\n                throw new NodomError('invoke', 'expression', '0', 'Node');\n            }\n            return stack;\n        }\n\n        /**\n         * 表达式计算\n         * @param model \t模型 或 fieldObj对象 \n         * @param modelId \t模型id（model为fieldObj时不能为空）\n\t\t * @returns \t\t计算结果\n         */\n        val(model:Model, modelId?:number) {\n            if (!model) { \n\t\t\t\treturn ''; \n\t\t\t}\n            if (this.stack === null) {\n                return '';\n            }\n\n            let fieldObj:object;\n            // 模型\n            if (model instanceof Model) {\n                modelId = model.id;\n                fieldObj = Object.create(null);\n                //字段值\n                this.fields.forEach((field) => {\n                    fieldObj[field] = this.getFieldValue(model, field);\n                });\n            } else {\n                fieldObj = model;\n            }\n            let newFieldValue:string = '';\n            this.fields.forEach((field) => {\n                newFieldValue += fieldObj[field];\n            });\n            //如果对应模型的值对象不存在，需要新建\n            if (this.modelMap[modelId] === undefined) {\n                this.modelMap[modelId] = Object.create(null);\n            }\n            //field值不一样，需要重新计算\n            if (this.modelMap[modelId].fieldValue !== newFieldValue) {\n                this.modelMap[modelId].value = this.cacStack(this.stack, fieldObj, modelId);\n            }\n\n            this.modelMap[modelId].fieldValue = newFieldValue;\n            return this.modelMap[modelId].value;\n        }\n\n        /**\n         * 添加变量\n\t\t * @param field \t字段\n\t\t * @param statc \t堆栈\n         */\n        private addVar(field:string, stack:Array<IStatckItem>) {\n            let values:Array<string> = ['null', 'undefined', 'true', 'false', 'NaN'];\n            //判断是否为值表达式 null undefined true false\n            let addFlag:boolean = values.indexOf(field) === -1 ? false : true;\n            addFlag = addFlag || Util.isNumberString(field);\n\n            //作为字符串处理   \n            if (addFlag) {\n                this.addStr(field, stack);\n            } else {\n                stack.push({\n                    val: field.trim(),\n                    type: 'field'\n                });\n                this.addField(field);\n            }\n        }\n\n        /**\n\t\t * 添加字符串\n\t\t * @param str \t\t待添加字符串\n\t\t * @param stack \t堆栈\n\t\t */\n        private addStr(str:string, stack:Array<IStatckItem>) {\n            //如果前一个类型为字符串，则追加到前一个\n            if (stack.length > 0 && stack[stack.length - 1].type === \"string\") {\n                stack[stack.length - 1].val += str;\n            } else {\n                stack.push({\n                    val: str,\n                    type: 'string'\n                });\n            }\n        }\n\n\t\t/**\n\t\t * 添加操作符\n\t\t * @param str \t\t操作符\n\t\t * @param stack \t堆栈\n\t\t */\n        private addOperand(str:string, stack:Array<IStatckItem>) {\n            stack.push({\n                val: str, //去掉字符串两端的空格\n                type: 'operand'\n            });\n        }\n\n        /**\n         * 添加过滤器\n         * @param value \tvalue\n         * @param filterArr\t过滤器数组\n         * @param stack \t堆栈\n         * @param vtype \t值类型 field字段 func函数 comp 组合 \t\n         * @param extra \t附加参数\n         */\n        private addFilter(filterArr:Array<string>, stack:Array<IStatckItem>) {\n            let module:Module = ModuleFactory.get(this.moduleName);\n            if (stack.length > 0) {\n                let filterStack:Array<IStatckItem> = []; //过滤器堆栈\n                let pre = stack[stack.length - 1];\n                let type = pre.type;\n\n                //字段、函数、不带括号的字符串\n                if (type === 'field' || type === 'function' || type === 'string') {\n                    filterStack.push(stack.pop());\n                } else if (type === 'operand' && pre.val === ')') { //括号操作符\n                    //匹配括号对\n                    let cnt = 1;\n                    let j = stack.length - 2;\n                    for (; j >= 0; j--) {\n                        // filterStack.unshift(stack[j].pop);\n                        if (stack[j].val === '(') {\n                            if (--cnt === 0) {\n                                break;\n                            }\n                        } else if (stack[j].val === ')') {\n                            cnt++;\n                        }\n                    }\n                    //拷贝堆栈元素\n                    filterStack = stack.slice(j, stack.length);\n                    //删除堆栈元素\n                    stack.splice(j, stack.length - j);\n                }\n\n                let expr:Expression = new Expression(null, module);\n                expr.stack = filterStack;\n                expr.fields = this.fields;\n                //前置表达式\n                if (!this.pre) {\n                    this.pre = [];\n                }\n                this.pre.push(expr.id);\n                // 过滤器入栈\n                stack.push({\n                    type: 'filter',\n                    filter: new Filter(filterArr),\n                    val: expr.id\n                });\n\n            }\n        }\n\n        /**\n         * 计算堆栈\n         * @param stack \t堆栈\n         * @param fieldObj \t字段对象\n\t\t * @param modelId \t模型id\n\t\t * @returns \t\t计算结果\n         */\n        cacStack(stack:Array<IStatckItem>, fieldObj:any, modelId?:number):string{\n            let retStr:string = '';\n            let needEval:boolean = false;\n            let module:Module = ModuleFactory.get(this.moduleName);\n\n            stack.forEach((item) => {\n                let value:string = '';\n                switch (item.type) {\n                case 'string': //字符串\n                    retStr += item.val;\n                    break;\n                case 'operand': //字符串\n                    retStr += item.val;\n                    needEval = true;\n                    break;\n                case 'field': //变量\n                    value = fieldObj[item.val];\n                    //字符串需要处理\n                    if (Util.isString(value)) {\n                        value = Util.addStrQuot(value);\n                    }\n                    retStr += value;\n                    break;\n                case 'function': //函数\n                    let foo:Function = module.methodFactory.get(item.val);\n                    let param:Array<any> = [];\n                    if (item.params.length > 0) {\n                        item.params.forEach((p) => {\n                            let pv = fieldObj[p];\n                            let isVal = false;\n                            //非数字和值，字符串两边添加引号\n                            if (Util.isString(pv) && pv !== '') {\n                                pv = Util.addStrQuot(pv);\n                            }\n                            param.push(pv);\n                        });\n                    }\n                    if (foo !== undefined && Util.isFunction(foo)) {\n                        value = foo.apply(module.model, param);\n                    } else { //系统函数\n                        value = item.val + '(' + param.join(',') + ')';\n                        needEval = true;\n                    }\n                    retStr += value;\n                    break;\n                case 'filter':\n                    // 作为前一轮已经计算\n                    value = module.expressionFactory.get(item.val).val(fieldObj, modelId);\n                    value = item.filter.exec(value, module);\n                    if (typeof value === 'object') { //对象，直接赋值，不做加法\n                        retStr = value;\n                    } else {\n                        //字符串\n                        if (Util.isString(value) && value !== '') {\n                            value = Util.addStrQuot(value);\n                        }\n                        retStr += value;\n                    }\n                }\n            });\n            if (needEval) {\n                try {\n                    retStr = eval(retStr);\n                } catch (e) {\n\n                }\n            } else if (Util.isString(retStr) && retStr.charAt(0) === '\"') { //字符串去掉两边的\"\n                retStr = retStr.substring(1, retStr.length - 1);\n            }\n            //替换所有undefined为空\n            if (retStr === undefined) {\n                retStr = '';\n            }\n            return retStr;\n        }\n\n        /**\n         * 添加字段到fields\n         * @param field \t字段\n         */\n        addField(field:string) {\n            if (this.fields.indexOf(field) === -1) {\n                this.fields.push(field);\n            }\n        }\n        /**\n         * 获取field值\n         * @param model \t模型，可为空\n         * @param field \t字段，可以带.\n\t\t * @returns \t\t字段值\n         */\n        getFieldValue(model:Model, field:string):any {\n            let module:Module = ModuleFactory.get(this.moduleName);\n            if (!model && module) {\n                model = module.model;\n            }\n            if (!model) {\n                return undefined;\n            }\n            let v = model.query(field);\n            if (v === undefined && model !== module.model) {\n                v = module.model.query(field);\n            }\n            return v;\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 表达式工厂\n     */\n    export class ExpressionFactory extends Factory {\n\n    }\n}","/// <reference path=\"../nodom.ts\" />\nnamespace nodom {\n    /**\n     *  指令类型初始化    \n     *  每个指令类型都有一个init和handle方法，init和handle都可选\n     *  init 方法在编译时执行，包含一个参数 directive(指令)、dom(虚拟dom)、module(模块),el(html element)，无返回\n     *  handle方法在渲染时执行，包含三个参数 directive(指令)、dom(虚拟dom)、module(模块)、parent(父虚拟dom)\n     *  return true/false false则不进行后面的所有渲染工作\n     */\n\n    DirectiveManager.addType('model', {\n        prio: 1,\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            let value: string = < string > directive.value;\n            //处理以.分割的字段，没有就是一个\n            if (Util.isString(value)) {\n                let arr = new Array();\n                value.split('.').forEach((item) => {\n                    let ind1 = -1,\n                        ind2 = -1;\n                    if ((ind1 = item.indexOf('[')) !== -1 && (ind2 = item.indexOf(']')) !== -1) { //数组\n                        let fn = item.substr(0, ind1);\n                        let index = item.substring(ind1 + 1, ind2);\n                        arr.push(fn + ',' + index);\n                    } else { //普通字符串\n                        arr.push(item);\n                    }\n                });\n                directive.value = arr;\n            }\n        },\n\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            let model = module.modelFactory.get(dom.modelId + '');\n            if (!model || !model.data) {\n                return;\n            }\n            let data = model.data;\n            directive.value.forEach((item) => {\n                if (!data) {\n                    return;\n                }\n                if (item.indexOf(',') !== -1) { //处理数组\n                    let a = item.split(',');\n                    data = data[a[0]][parseInt(a[1])];\n                } else { //非数组\n\n                    data = data[item];\n                }\n            });\n            if (data) {\n                dom.modelId = data.$modelId;\n            }\n            return true;\n        }\n    });\n\n    /**\n     * 指令名 repeat\n     * 描述：重复指令\n     */\n    DirectiveManager.addType('repeat', {\n        prio: 2,\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            let value = directive.value;\n            if (!value) {\n                throw new NodomError(\"paramException\", \"x-repeat\");\n            }\n\n            let ind, filter, modelName;\n            //过滤器\n            if ((ind = value.indexOf('|')) !== -1) {\n                modelName = value.substr(0, ind).trim();\n                directive.filter = new Filter(value.substr(ind + 1));\n            } else {\n                modelName = value;\n            }\n\n            // 增加model指令\n            if (!dom.hasDirective('mocel')) {\n                dom.directives.push(new Directive('model', modelName, dom, module));\n            }\n\n            directive.value = modelName;\n        },\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            const modelFac = module.modelFactory;\n            let rows = modelFac.get(dom.modelId + '').data;\n            //有过滤器，处理数据集合\n            if (directive.filter !== undefined) {\n                rows = directive.filter.exec(rows, module);\n            }\n\n            // 无数据，不渲染\n            if (rows === undefined || rows.length === 0) {\n                dom.dontRender = true;\n                return true;\n            }\n\n            let chds = [];\n            let key = dom.key;\n\n            // 移除指令\n            dom.removeDirectives(['model', 'repeat']);\n\n            for (let i = 0; i < rows.length; i++) {\n                let node = dom.clone();\n                //设置modelId\n                node.modelId = rows[i].$modelId;\n                //设置key\n                setKey(node, key, node.modelId);\n                rows[i].$index = i;\n                chds.push(node);\n            }\n\n            //找到并追加到dom后\n            if (chds.length > 0) {\n                for (let i = 0, len = parent.children.length; i < len; i++) {\n                    if (parent.children[i] === dom) {\n                        chds = [i + 1, 0].concat(chds);\n                        Array.prototype.splice.apply(parent.children, chds);\n                        break;\n                    }\n                }\n            }\n\n            // 不渲染该节点\n            dom.dontRender = true;\n            return false;\n\n            function setKey(node, key, id) {\n                node.key = key + '_' + id;\n                node.children.forEach((dom) => {\n                    setKey(dom, dom.key, id);\n                });\n            }\n        }\n    });\n\n    /**\n     * 指令名 if\n     * 描述：条件指令\n     */\n    DirectiveManager.addType('if', {\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            let value = directive.value;\n            if (!value) {\n                throw new NodomError(\"paramException\", \"x-repeat\");\n            }\n            //value为一个表达式\n            let expr = new Expression(value, module);\n            directive.value = expr;\n        },\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            //设置forceRender\n            let model = module.modelFactory.get(dom.modelId);\n            let v = directive.value.val(model);\n            //找到并存储if和else在父对象中的位置\n            let indif = -1,\n                indelse = -1;\n            for (let i = 0; i < parent.children.length; i++) {\n                if (parent.children[i] === dom) {\n                    indif = i;\n                } else if (indelse === -1 && parent.children[i].hasDirective('else')) {\n                    indelse = i;\n                }\n\n                //if后的第一个element带else才算，否则不算\n                if (i !== indif && indif !== -1 && indelse === -1 && parent.children[i].tagName !== undefined) {\n                    indelse = -2;\n                }\n\n                //都找到了\n                if (indif !== -1 && indelse !== -1) {\n                    break;\n                }\n            }\n            if (v && v !== 'false') { //为真\n                let ind = 0;\n                //删除else\n                if (indelse > 0) {\n                    parent.children[indelse].dontRender = true;\n                }\n            } else if (indelse > 0) { //为假则进入else渲染\n                //替换if\n                dom.dontRender = true;\n            }\n            return true;\n        }\n    });\n\n    /**\n     * 指令名 else\n     * 描述：else指令\n     */\n    DirectiveManager.addType('else', {\n        name: 'else',\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            return;\n        },\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            return;\n        }\n    });\n\n    /**\n     * 指令名 show\n     * 描述：显示指令\n     */\n    DirectiveManager.addType('show', {\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            let value = directive.value;\n            if (!value) {\n                throw new NodomError(\"paramException\", \"x-show\");\n            }\n            let expr = new Expression(value, module);\n            directive.value = expr;\n        },\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            let model = module.modelFactory.get(dom.modelId);\n            let v = directive.value.val(model);\n            //渲染\n            if (v && v !== 'false') {\n                dom.dontRender = false;\n            } else { //不渲染\n                dom.dontRender = true;\n            }\n\n        }\n    });\n\n    /**\n     * 指令名 class\n     * 描述：class指令\n     */\n    DirectiveManager.addType('class', {\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            //转换为json数据\n            let obj = eval('(' + directive.value + ')');\n            if (!Util.isObject(obj)) {\n                return;\n            }\n            let robj = {};\n            Util.getOwnProps(obj).forEach(function (key) {\n                if (Util.isString(obj[key])) {\n                    //如果是字符串，转换为表达式\n                    robj[key] = new Expression(obj[key], module);\n                } else {\n                    robj[key] = obj[key];\n                }\n            });\n            directive.value = robj;\n        },\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            let obj = directive.value;\n            let clsArr = [];\n            let cls = dom.props['class'];\n            let model = module.modelFactory.get(dom.modelId);\n            if (Util.isString(cls) && !Util.isEmpty(cls)) {\n                clsArr = cls.trim().split(/\\s+/);\n            }\n\n            Util.getOwnProps(obj).forEach(function (key) {\n                let r = obj[key];\n\n                if (r instanceof Expression) {\n                    r = r.val(model);\n                }\n                let ind = clsArr.indexOf(key);\n                if (!r || r === 'false') {\n                    //移除class\n                    if (ind !== -1) {\n                        clsArr.splice(ind, 1);\n                    }\n                } else if (ind === -1) { //添加class\n                    clsArr.push(key);\n                }\n            });\n            //刷新dom的class\n            dom.props['class'] = clsArr.join(' ');\n        }\n    });\n\n    /**\n     * 指令名 field\n     * 描述：字段指令\n     */\n    DirectiveManager.addType('field', {\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            // 带过滤器情况\n            let dv = directive.value;\n            let field = dv;\n            let tgname = dom.tagName.toLowerCase();\n            let type = dom.props['type'];\n            let eventName = 'input';\n            if (tgname === 'input' && (type === 'checkbox' || type === 'radio')) {\n                eventName = 'change';\n            }\n\n            //增加name属性\n            dom.props['name'] = field;\n\n            //增加自定义方法\n            let method = '$nodomGenMethod' + Util.genId();\n            module.methodFactory.add(method,\n                function (e, module, view, dom) {\n                    let type = dom.props['type'];\n                    let model = module.modelFactory.get(dom.modelId);\n                    let field = dom.getDirective('field').value;\n                    let v = view.value;\n                    //根据选中状态设置checkbox的value\n                    if (type === 'checkbox') {\n                        if (dom.props['yes-value'] == v) {\n                            v = dom.props['no-value'];\n                        } else {\n                            v = dom.props['yes-value'];\n                        }\n                    } else if (type === 'radio') {\n                        if (!view.checked) {\n                            v = undefined;\n                        }\n                    }\n                    //修改字段值\n                    this.data[field] = v;\n                    //修改value值，该节点不重新渲染\n                    if (type !== 'radio') {\n                        dom.props['value'] = v;\n                        view.value = v;\n                    }\n                }\n            );\n            //追加事件\n            dom.events[eventName] = new NodomEvent(eventName, method);\n\n            //增加value属性，属性可能在后面，需要延迟处理\n            setTimeout(() => {\n                //增加value属性\n                if (!dom.exprProps.hasOwnProperty('value') && !dom.props.hasOwnProperty('value')) {\n                    dom.exprProps['value'] = new Expression(field, module);\n                }\n            }, 0);\n\n        },\n\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            const type = dom.props['type'];\n            const tgname = dom.tagName.toLowerCase();\n            const model = module.modelFactory.get(dom.modelId);\n            const dataValue = model.data[directive.value];\n            let value = dom.props['value'];\n\n            if (type === 'radio') {\n                if (dataValue == value) {\n                    dom.props['checked'] = 'checked';\n                } else {\n                    delete dom.props['checked'];\n                }\n            } else if (type === 'checkbox') {\n                //设置状态和value\n                let yv = dom.props['yes-value'];\n                //当前值为yes-value\n                if (dataValue == yv) {\n                    dom.props['checked'] = 'checked';\n                    dom.props['value'] = yv;\n                } else { //当前值为no-value\n                    delete dom.props['checked'];\n                    dom.props['value'] = dom.props['no-value'];\n                }\n            } else if (tgname === 'select') { //下拉框\n                dom.props['value'] = dataValue;\n                //option可能没生成，延迟赋值\n                setTimeout(()=>{\n                    let inputEl:HTMLInputElement = module.container.querySelector(\"[key='\" + dom.key + \"']\");\n                    inputEl.value = dataValue;\n                }, 0);\n            }\n        }\n    });\n\n    /**\n     * 指令名 validity\n     * 描述：字段指令\n     */\n    DirectiveManager.addType('validity', {\n        init: (directive: Directive, dom: Element, module: Module, el: HTMLElement) => {\n            let ind, fn, method;\n            let value = directive.value;\n            //处理带自定义校验方法\n            if ((ind = value.indexOf('|')) !== -1) {\n                fn = value.substr(0, ind);\n                method = value.substr(ind + 1);\n            } else {\n                fn = value;\n            }\n            directive.value = fn;\n\n            directive.params = {\n                enabled: false //不可用\n            }\n            //如果有方法，则需要存储\n            if (method) {\n                directive.params.method = method;\n            }\n\n            //如果没有子节点，添加一个，需要延迟执行\n            setTimeout(() => {\n                if (dom.children.length === 0) {\n                    let vd1 = new Element();\n                    vd1.textContent = '   ';\n                    dom.children.push(vd1);\n                } else { //子节点\n                    dom.children.forEach((item) => {\n                        if (item.children.length === 0) {\n                            let vd1 = new Element();\n                            vd1.textContent = '   ';\n                            item.children.push(vd1);\n                        }\n                    })\n                }\n\n            }, 0);\n\n            //添加focus和blur事件\n            module.addFirstRenderOperation(function () {\n                const m = this;\n                const el = module.container.querySelector(\"[name='\" + directive.value + \"']\");\n                if (el) {\n                    //增加事件\n                    el.addEventListener('focus', function (e) {\n                        directive.params.enabled = true;\n                    });\n                    el.addEventListener('blur', function (e) {\n                        Renderer.add(m);\n                    });\n                }\n            });\n        },\n\n        handle: (directive: Directive, dom: Element, module: Module, parent: Element) => {\n            const el:HTMLInputElement = module.container.querySelector(\"[name='\" + directive.value + \"']\");\n            if (!directive.params.enabled) {\n                dom.dontRender = true;\n                return;\n            }\n\n            let chds = [];\n            //找到带rel的节点\n            dom.children.forEach((item) => {\n                if (item.tagName !== undefined && item.props.hasOwnProperty('rel')) {\n                    chds.push(item);\n                }\n            });\n\n            let resultArr = [];\n\n            //自定义方法校验\n            if (directive.params.method) {\n                const foo = module.methodFactory.get(directive.params.method);\n                if (Util.isFunction(foo)) {\n                    let r = foo.call(module.model, el.value);\n                    if (!r) {\n                        resultArr.push('custom');\n                    }\n                }\n            }\n\n            let vld = el.validity;\n            if (!vld.valid) {\n                // 查找校验异常属性\n                for (var o in vld) {\n                    if (vld[o] === true) {\n                        resultArr.push(o);\n                    }\n                }\n            }\n            if (resultArr.length > 0) {\n                //转换成ref对应值\n                let vn = handle(resultArr);\n                //单个校验\n                if (chds.length === 0) {\n                    setTip(dom, vn, el);\n                } else { //多个校验\n                    for (let i = 0; i < chds.length; i++) {\n                        let rel = chds[i].props['rel'];\n                        if (rel === vn) {\n                            setTip(chds[i], vn, el);\n                        } else { //隐藏\n                            chds[i].dontRender = true;\n                        }\n                    }\n                }\n            } else {\n                dom.dontRender = true;\n            }\n\n\n            /**\n             * 设置提示\n             * @param vd    虚拟dom节点\n             * @param vn    验证结果名\n             * @param el    验证html element\n             */\n            function setTip(vd: Element, vn: string, el ? : HTMLElement) {\n                //子节点不存在，添加一个\n                let text = ( < string > vd.children[0].textContent).trim();\n                if (text === '') { //没有提示内容，根据类型提示\n                    text = Util.compileStr(FormMsgs[vn], el.getAttribute(vn));\n                }\n                vd.children[0].textContent = text;\n            }\n\n            /**\n             * 验证名转换\n             */\n            function handle(arr: Array < string > ) {\n                for (var i = 0; i < arr.length; i++) {\n                    switch (arr[i]) {\n                    case 'valueMissing':\n                        return 'required';\n                    case 'typeMismatch':\n                        return 'type';\n                    case 'tooLong':\n                        return 'maxLength';\n                    case 'tooShort':\n                        return 'minLength';\n                    case 'rangeUnderflow':\n                        return 'min';\n                    case 'rangeOverflow':\n                        return 'max';\n                    case 'patternMismatch':\n                        return 'pattern';\n                    default:\n                        return arr[i];\n                    }\n                }\n            }\n        }\n    });\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n     * 工厂基类\n     */\n    export class Factory {\n\t\t/**\n\t\t * 模块名\n\t\t */\n\t\tmoduleName:string;\n\t\t/**\n\t\t * 工厂item对象\n\t\t */\n\t\titems:object;\n\t\t\n\t\t/**\n\t\t * @param module 模块\n\t\t */\n\t\tconstructor(module?:Module) {\n            if (module !== undefined) {\n                this.moduleName = module.name;\n            }\n            //容器map\n            this.items = Object.create(null);\n        }\n\n        /**\n         * 添加到工厂\n\t\t * @param name \titem name\n\t\t * @param item\titem\n         */\n        add(name:any, item:any) {\n            this.items[name] = item;\n        }\n\n        /**\n         * 获得item\n\t\t * @param name \titem name\n         */\n        get(name:any) {\n            return this.items[name];\n        }\n\n        /**\n         * 从容器移除\n\t\t * @param name \titem name\n         */\n        remove(name:any) {\n            delete this.items[name];\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 过滤器类\n     */\n    export class Filter {\n\t\t/**\n\t\t * 过滤器类型\n\t\t */\n\t\ttype:string;\n\t\t/**\n\t\t * 过滤器参数数组\n\t\t */\n\t\tparams:Array<string>;\n        /**\n         * 构造方法\n         * @param src \t\t源串，或explain后的数组\n         */\n        constructor(src:string|string[]) {\n\t\t\tlet arr:Array<string> = Util.isString(src)?FilterManager.explain(<string>src):<Array<string>>src;\n            if (arr) {\n                this.type = arr[0];\n                this.params = arr.slice(1);\n            }\n        }\n\n        /**\n         * 过滤器执行\n         * @param value \t待过滤值\n         * @param module \t模块\n         * @returns \t\t过滤结果\n         */\n        exec(value:string, module:Module):string{\n            let args = [module, this.type, value].concat(this.params);\n            return Util.apply(FilterManager.exec, module, args);\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />s\nnamespace nodom {\n    /**\n     * 过滤器工厂，存储模块过滤器\n     */\n    export class FilterFactory extends Factory {\n\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * filter类型命名规则：以小写字母a-z命名，其它字母不允许\n     */\n    export class FilterManager {\n\t\t/**\n\t\t * 过滤类型\n\t\t */\n\t\tstatic filterTypes:Map<string,Function> = new Map();\n\t\t/**\n\t\t * 不可编辑类型\n\t\t */\n\t\tstatic cantEditTypes:Array<string> = ['date','currency','number','tolowercase','touppercase','orderBy','filter'];\n\n        /**\n         * 创建过滤器类型\n         * @param name \t\t过滤器类型名\n         * @param handler \t过滤器类型处理函数{init:foo1,handler:foo2}\n         */\n        static addType(name, handler) {\n            if (!/^[a-zA-Z]+$/.test(name)) {\n                throw new NodomError('namedinvalid', TipWords.filterType, name);\n            }\n            if (this.filterTypes.has(name)) {\n                throw new NodomError('exist1', TipWords.filterType, name);\n            }\n            if (!Util.isFunction(handler)) {\n                throw new NodomError('invoke', 'FilterManager.addType', '1', 'Function');\n            }\n            this.filterTypes.set(name, handler);\n        }\n\n        /**\n         * 移除过滤器类型\n         * @param name  过滤器类型名\n         */\n        static removeType(name:string) {\n            if (this.cantEditTypes.indexOf(name) !== -1) {\n                throw new NodomError('notupd', TipWords.system + TipWords.filterType, name);\n            }\n            if (!this.filterTypes.has(name)) {\n                throw new NodomError('notexist1', TipWords.filterType, name);\n            }\n            this.filterTypes.delete(name);\n        }\n\n        /**\n         * 是否有某个过滤器类型\n         * @param type \t\t过滤器类型名\n         * @return \t\t\ttrue/false\n         */\n        static hasType(name:string):boolean {\n            return this.filterTypes.has(name);\n        }\n\n        /**\n         * 执行过滤器\n         * @param module \t模块\n         * @param type \t\t类型\n         * @param arguments 参数数组  0模块 1过滤器类型名 2待处理值 3-n处理参数\n\t\t * @returns \t\t过滤器执行结果\n         */\n        static exec(module:Module, type:string):string {\n            let params = new Array();\n            for (let i = 2; i < arguments.length; i++) {\n                params.push(arguments[i]);\n            }\n            if (!FilterManager.filterTypes.has(type)) {\n                throw new NodomError('notexist1', TipWords.filterType, type);\n            }\n            //调用\n            return Util.apply(FilterManager.filterTypes.get(type), module, params);\n        }\n\n        /**\n         * 解析过滤器串为数组\n         * @param src \t源字符串，格式为filtertype:param1:param2:... \t\n\t\t * @returns \t解析后的过滤器数组参数\n         */\n        static explain(src: string): Array < string > {\n            let startStr: string\n            let startObj: boolean = false;\n            let strings:string = \"\\\"'`\"; //字符串开始和结束标志\n            let splitCh:string = ':'; //分隔符\n            let retArr = new Array();\n            let tmp = ''; //临时串\n            for (let i = 0; i < src.length; i++) {\n                let ch = src[i];\n                //字符串开始或结束\n                if (strings.indexOf(ch) !== -1) {\n                    if (ch === startStr) { //字符串结束\n                        startStr = undefined;\n                    } else { //字符串开始\n                        startStr = ch;\n                    }\n                } else if (startStr === undefined) { //非字符串开始情况检查对象\n                    if (ch === '}' && startObj) { //对象结束\n                        startObj = false;\n                    } else if (ch === '{') { //对象开始\n                        startObj = true;\n                    }\n                }\n\n                //分割开始\n                if (ch === splitCh && startStr === undefined && !startObj && tmp !== '') {\n                    retArr.push(handleObj(tmp));\n                    tmp = '';\n                    continue;\n                }\n                tmp += ch;\n            }\n\n            //最后一个\n            if (tmp !== '') {\n                retArr.push(handleObj(tmp));\n            }\n            return retArr;\n            /**\n             * 转化字符串为对象\n             */\n            function handleObj(s:string) {\n                s = s.trim();\n                if (s.charAt(0) === '{') { //转换为对象\n                    s = eval('(' + s + ')');\n                }\n                return s;\n            }\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 链式操作器\n     */\n    export class Linker{\n\t\t/**\n\t\t * \n\t\t * @param type \t\t类型，包括：ajax(ajax请求),getfiles(加载多个文件),dolist(执行多个异步操作)\n\t\t * @param config \t配置参数，针对不同type配置不同\n\t\t */\n        static gen(type:string, config:any):Promise<any> {\n            let p:Promise<any>;\n            switch (type) {\n            case 'ajax': //单个ajax\n                p = this.ajax(config);\n                break;\n            case 'getfiles': //ajax get 多个文件\n                p = this.getfiles(config);\n                break;\n            case 'dolist': //同步操作组\n                if (arguments.length === 3) {\n                    p = this.dolist(config.funcs,config.params);\n                } else {\n                    p = this.dolist(config.funcs);\n                }\n            }\n            return p;\n        }\n\n        /**\n         * ajax 请求\n         * @param config \turl \t\t\t\t请求地址\n         *\t\t\t\t\treqType \t\t\t请求类型 GET(默认) POST\n         *\t\t\t\t\tparams \t\t\t\t参数，json格式\n         *\t\t\t\t\tasync \t\t\t\t异步，默认true\n         *  \t\t\t\ttimeout \t\t\t超时时间\n         *\t\t\t\t\twithCredentials \t同源策略，跨域时cookie保存，默认false\n         * \t\t\t\t\t\n         */\n        private static ajax(config):Promise<any> {\n            return new Promise((resolve, reject) => {\n                //随机数\n                if (config.rand) { //针对数据部分，仅在app中使用\n                    config.params = config.params || {};\n                    config.params.$rand = Math.random();\n                }\n                let url:string = config.url;\n                const async:boolean = config.async === false ? false : true;\n                const req:XMLHttpRequest = new XMLHttpRequest();\n                //设置同源策略\n                req.withCredentials = config.withCredentials;\n                //类型默认为get\n                const reqType:string = config.reqType || 'GET';\n                //超时，同步时不能设置\n                req.timeout = async ?config.timeout: 0;\n\n                req.onload = () => {\n                    if (req.status === 200) {\n                        let r = req.responseText;\n                        if (config.type === 'json') {\n                            try {\n                                r = JSON.parse(r);\n                            } catch (e) {\n                                reject({ type: \"jsonparse\" });\n                            }\n                        }\n                        resolve(r);\n                    } else {\n                        reject({ type: 'error', url: url });\n                    }\n                }\n\n                req.ontimeout = () => reject({ type: 'timeout' });\n                req.onerror = () => reject({ type: 'error', url: url });\n\n                switch (reqType) {\n                case 'GET':\n                    //参数\n                    let pa:string;\n                    if (Util.isObject(config.params)) {\n                        let ar:string[] = [];\n                        Util.getOwnProps(config.params).forEach(function (key) {\n                            ar.push(key + '=' + config.params[key]);\n                        });\n                        pa = ar.join('&');\n                    }\n                    if (pa !== undefined) {\n                        if (url.indexOf('?') !== -1) {\n                            url += '&' + pa;\n                        } else {\n                            url += '?' + pa;\n                        }\n                    }\n                    req.open(reqType, url, async, config.user, config.pwd);\n                    req.send(null);\n                    break;\n                case 'POST':\n                    let fd:FormData = new FormData();\n                    for (let o in config.params) {\n                        fd.append(o, config.params[o]);\n                    }\n                    req.open(reqType, url, async, config.user, config.pwd);\n                    req.send(fd);\n                    break;\n                }\n            }).catch((re) => {\n                switch (re.type) {\n                case \"error\":\n                    throw new NodomError(\"notexist1\", TipWords.resource, re.url);\n                case \"timeout\":\n                    throw new NodomError(\"timeout\");\n                case \"jsonparse\":\n                    throw new NodomError(\"jsonparse\");\n                }\n            });\n        }\n\n        /**\n         * 通过get获取多个文件\n\t\t * @param urls \t文件url数组\n         */\n        private static getfiles(urls):Promise<any>{\n            let promises = [];\n            urls.forEach((url) => {\n                promises.push(new Promise((resolve, reject) => {\n                    const req = new XMLHttpRequest();\n                    req.onload = () => resolve(req.responseText);\n                    req.onerror = () => reject(url);\n                    req.open(\"GET\", url);\n                    req.send();\n                }));\n            });\n\n            return Promise.all(promises).catch((text) => {\n                throw new NodomError(\"notexist1\", TipWords.resource, text);\n            });\n        }\n\n        /**\n         * 同步顺序执行\n         * @param funcArr \t函数数组\n         * @param paramArr \t参数数组\n         * @returns \t\tpromise对象\n         */\n        private static dolist(funcArr:Array<Function>, paramArr?:Array<any>):Promise<any> {\n\t\t\treturn foo(funcArr, 0, paramArr);\n\t\t\t\n            function foo(fa, i, pa) {\n                if (fa.length === 0) {\n                    return Promise.resolve();\n                } else {\n                    return new Promise((resolve, reject) => {\n                        if (pa !== null || pa !== undefined) {\n                            fa[i](resolve, reject, pa[i]);\n                        } else {\n                            fa[i](resolve, reject);\n                        }\n                    }).then((success) => {\n                        if (i < fa.length - 1) {\n                            return foo(fa, i + 1, pa);\n                        }\n                    });\n                }\n            }\n        }\n    }\n}","/// <reference path=\"../nodom.ts\" />\n/*\n * 消息js文件 中文文件\n */\nnamespace nodom{\n\t/**\n\t * 提示单词\n\t */\n\texport const TipWords={\n\t\tapplication:\"应用\",\n\t\tsystem:\"系统\",\n\t\tmodule:\"模块\",\n\t\tmoduleClass:'模块类',\n\t\tmodel:\"模型\",\n\t\tdirective:\"指令\",\n\t\tdirectiveType:\"指令类型\",\n\t\texpression:\"表达式\",\n\t\tevent:\"事件\",\n\t\tmethod:\"方法\",\n\t\tfilter:\"过滤器\",\n\t\tfilterType:\"过滤器类型\",\n\t\tdata:\"数据\",\n\t\tdataItem:'数据项',\n\t\troute:'路由',\n\t\trouteView:'路由容器',\n\t\tplugin:'插件',\n\t\tresource:'资源',\n\t\troot:'根'\n\t}\n\t/**\n\t * 异常信息\n\t */\n\texport const ErrorMsgs={\n\t\tunknown:\"未知错误\",\n\t\tparamException:\"{0}'{1}'方法参数错误，请参考api\",\n\t\tinvoke:\"{0}方法调用参数{1}必须为{2}\",\n\t\tinvoke1:\"{0}方法调用参数{1}必须为{2}或{3}\",\n\t\tinvoke2:\"{0}方法调用参数{1}或{2}必须为{3}\",\n\t\tinvoke3:\"{0}方法调用参数{1}不能为空\",\n\t\texist:\"{0}已存在\",\n\t\texist1:\"{0}'{1}'已存在\",\n\t\tnotexist:\"{0}不存在\",\n\t\tnotexist1:\"{0}'{1}'不存在\",\n\t\tnotupd:\"{0}不可修改\",\n\t\tnotremove:\"{0}不可删除\",\n\t\tnotremove1:\"{0}{1}不可删除\",\n\t\tnamedinvalid:\"{0}{1}命名错误，请参考用户手册对应命名规范\",\n\t\tinitial:\"{0}初始化参数错误\",\n\t\tjsonparse:\"JSON解析错误\",\n\t\ttimeout:\"请求超时\",\n\t\tconfig:\"{1}配置参数错误\"\n\t}\n\n\t/**\n\t * 表单信息\n\t */\n\texport const FormMsgs={\n\t\ttype:\"请输入有效的{0}\",\n\t\tunknown:\"输入错误\",\n\t\trequired:\"不能为空\",\n\t\tmin:\"最小输入值为{0}\",\n\t\tmax:\"最大输入值为{0}\"\n\t}\n}\n","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 消息类\n     */\n    export class Message {\n        /**\n         * 来源模块名\n         */\n        fromModule: string;\n        /**\n         * 目标模块名\n         */\n        toModule: string;\n        /**\n         * 消息内容\n         */\n        content: any;\n        /**\n         * 是否已读\n         */\n        readed: boolean;\n\n        /**\n         * @param fromModule \t来源模块名\n         * @param toModule \t\t目标模块名\n         * @param content \t\t消息内容\n         */\n        constructor(fromModule: string, toModule: string, content: any) {\n            this.fromModule = fromModule;\n            this.toModule = toModule;\n            this.content = content;\n            this.readed = false;\n        }\n    }\n    /**\n     * 消息队列\n     */\n    export class MessageQueue {\n        /**\n         * 消息数组\n         */\n        static messages: Array < Message > ;\n        /**\n         * 添加消息到消息队列\n         * @param fromModule \t来源模块名\n         * @param toModule \t\t目标模块名\n         * @param content \t\t消息内容\n         */\n        static add(from: string, to: string, data: any) {\n            this.messages.push(new Message(from, to, data));\n        }\n\n        /**\n         * 处理消息队列\n         */\n        static handleQueue() {\n            for (let i = 0; i < this.messages.length; i++) {\n                let msg: Message = this.messages[i];\n                let module: Module = ModuleFactory.get(msg.toModule);\n                // 模块状态未未激活或激活才接受消息\n                if (module && module.state === 2 || module.state === 3) {\n                    module.receive(msg.fromModule, msg.content);\n                }\n                // 清除已接受消息，或已死亡模块的消息\n                if (module && module.state >= 2) {\n                    MessageQueue.messages.splice(i--, 1);\n                }\n            }\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n     * 方法工厂，每个模块一个\n     */\n    export class MethodFactory extends Factory {\n\t\tmodule:Module;\n\t\t/**\n         * 调用方法\n         * @param name \t\t方法名\n         * @param params \t方法参数数组\n         */\n        invoke(name:string, params:Array<any>) {\n            const foo = this.get(name);\n            if (!Util.isFunction(foo)) {\n                throw new NodomError(nodom.ErrorMsgs.notexist1, TipWords.method, name);\n            }\n            return Util.apply(foo, this.module.model, params);\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 模型类\n     */\n    export class Model {\n        /**\n         * 模型id（唯一）\n         */\n        id: number;\n        /**\n         * 模型对应的模块名\n         */\n        moduleName: string;\n\n        /**\n         * 模型对应数据\n         */\n        data: object;\n        /**\n         * 模型字段集\n         */\n        fields: object = {};\n\n        /**\n         * @param data \t\t数据\n         * @param module \t模块对象\n         */\n        constructor(data: any, module: Module) {\n            this.data = data;\n            this.fields = {};\n            // modelId\n            this.id = nodom.Util.genId();\n            //添加到model工厂\n            if (module) {\n                this.moduleName = module.name;\n                if (module.modelFactory) {\n                    module.modelFactory.add(this.id+'',this);\n                }\n            }\n\n            // 给data设置modelid\n            data['$modelId'] = this.id;\n            this.addSetterGetter(data);\n        }\n\n        /**\n         * 设置属性，可能属性之前不存在，用于在初始化不存在的属性创建和赋值\n         * @param key       键，可以带“.”，如a, a.b.c\n         * @param value     对应值\n         */\n        set(key:string, value:any) {\n            let fn, data;\n            let index:number = key.lastIndexOf('.');\n            if (index !== -1) { //key中有“.”\n                fn = key.substr(index + 1);\n                key = key.substr(0, index);\n                data = this.query(key);\n            } else {\n                fn = key;\n                data = this.data;\n            }\n\n            //数据不存在\n            if (data === undefined) {\n                throw new NodomError('notexist1', TipWords.dataItem, key);\n            }\n\n            if (data[fn] !== value) {\n                let module:Module = ModuleFactory.get(this.moduleName);\n                // object或array需要创建新model\n                if (Util.isObject(value) || Util.isArray(value)) {\n                    new Model(value, module);\n                }\n                let model:Model = module.modelFactory.get(data.$modelId);\n                if (model) {\n                    //如果不存在，则需要定义 set 方法\n                    if (data[fn] === undefined) {\n                        this.defineProp(data, fn);\n                    }\n                    model.update(fn, value);\n                }\n                data[fn] = value;\n            }\n        }\n\n        /**\n         * 更新字段值\n         * @param field \t字段名或空(数组更新)\n         * @param value \t字段对应的新值\n         */\n        update(field:string, value?:any) {\n            let change = false;\n\n            //对象设置值\n            if (Util.isString(field)) {\n                if (this.fields[field] !== value) {\n                    this.fields[field] = value;\n                    change = true;\n                }\n            }\n            //添加到模块数据改变\n            if (change) {\n                ModuleFactory.get(this.moduleName).dataChange(this);\n            }\n        }\n        /**\n         * 为对象添加setter\n         */\n        addSetterGetter(data:any) {\n            if (Util.isObject(data)) {\n                Util.getOwnProps(data).forEach((p)=>{\n                    let v = data[p];\n                    if (Util.isObject(v) || Util.isArray(v)) {\n                        new Model(v, ModuleFactory.get(this.moduleName));\n                    } else {\n                        this.update(p, v);\n                        this.defineProp(data, p);\n                    }\n                });\n            } else if (Util.isArray(data)) {\n                //监听数组事件\n                let watcher:Array<string> = ['push', 'unshift', 'splice', 'pop', 'shift', 'reverse', 'sort'];\n                let module:Module = ModuleFactory.get(this.moduleName);\n                //添加自定义事件，绑定改变事件\n                watcher.forEach((item) => {\n                    data[item] = ()=> {\n                        let args = [];\n                        switch (item) {\n                        case 'push':\n                            for (let i = 0; i < arguments.length; i++) {\n                                args.push(arguments[i]);\n                            }\n                            break;\n                        case 'unshift':\n                            for (let i = 0; i < arguments.length; i++) {\n                                args.push(arguments[i]);\n                            }\n                            break;\n                        case 'splice':\n                            //插入新元素\n                            if (arguments.length > 2) {\n                                for (let i = 2; i < arguments.length; i++) {\n                                    args.push(arguments[i]);\n                                }\n                            }\n                            break;\n                        case 'pop':\n                            // module.deleteData(data[data.length - 1].$modelId);\n                            break;\n                        case 'shift':\n                            // module.deleteData(data[0].$modelId);\n                            break;\n                        }\n                        this.update(data);\n                        Array.prototype[item].apply(data, arguments);\n                        //递归创建新model\n                        args.forEach((arg) => {\n                            if (Util.isObject(arg) || Util.isArray(arg)) {\n                                new Model(arg, ModuleFactory.get(this.moduleName));\n                            }\n                        });\n                    }\n                });\n\n                //设置model\n                data.forEach((item) => {\n                    if (Util.isObject(item) || Util.isArray(item)) {\n                        new Model(item, ModuleFactory.get(this.moduleName));\n                    }\n                });\n            }\n        }\n\n        /**\n         * 定义属性set和get方法\n         * @param data \t数据对象\n         * @param p \t属性\n         */\n        defineProp(data:any, p:string) {\n            Object.defineProperty(data, p, {\n                set: (v)=> {\n                    if (this.fields[p] === v) {\n                        return;\n                    }\n                    this.update(p, v);\n                    data[p] = v;\n                },\n                get: ()=> {\n                    if (this.fields[p] !== undefined) {\n                        return this.fields[p];\n                    }\n                }\n            });\n        }\n        /**\n         * 查询字段值\n         * @param name \t\t字段名，可以是多段式 如 a.b.c\n         */\n        query(name:string) {\n            let data:any = this.data;\n            let fa:Array<string> = name.split(\".\");\n            for (let i = 0; i < fa.length && null !== data && typeof data === 'object'; i++) {\n                if (data === undefined) {\n                    return;\n                }\n                //是数组\n                if (fa[i].charAt(fa[i].length - 1) === ']') {\n                    let f:Array<string> = fa[i].split('[');\n                    data = data[f[0]];\n                    f.shift();\n                    //处理单重或多重数组\n                    f.forEach((istr) => {\n                        let ind = istr.substr(0, istr.length - 1);\n                        data = data[parseInt(ind)];\n                    });\n                } else {\n                    data = data[fa[i]];\n                }\n            }\n            return data;\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom{\n    /**\n     * 模型工厂\n     */\n    export class ModelFactory extends Factory{}\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 模块配置对象\n     */\n    export interface IModuleCfg {\n        /**\n         * 模块名(全局唯一)，如果不设置，则系统会自动生成Module+id\n         */\n        name ? : string;\n        /**\n         * 是否静态，如果为静态模块，则不产生虚拟dom，只需要把该模块对应模版置入容器即可\n         */\n        static ? : boolean;\n        \n        /**\n         * 父模块名\n         */\n        parentName ? : string;\n        /**\n         * 子模块数组\n         */\n        modules ? : Array < IModuleCfg > ;\n        /**\n         * 存放模块的容器（选择器或html element）\n         */\n        el: string | HTMLElement;\n        /**\n         * 模版字符串，如果以“<”开头，则表示模版字符串，否则表示模版url\n         */\n        template ? : string;\n        /**\n         * 数据，如果为json object，直接作为模型数据，如果为字符串，则表示数据url，需要请求得到数据\n         */\n        data ? : object | string;\n        /**\n         * 模块方法集合\n         * ```\n         * \t{\n         * \t\tmethod1:function1(){},\n         * \t\tmethod2:function2(){},\n         * \t\t...\n         * \t}\n         * ```\n         */\n        methods ? : object;\n        /**\n         * 延迟初始化，如果设置为true，则不会提前加载并初始化\n         */    \n        delayInit:boolean;\n        /**\n         * 先于模块初始化加载的文件[{type:'js'/'css',url:路径}\n         */\n        requires:Array<string|object>;\n    }\n    /**\n     * 模块类\n     */\n    export class Module {\n        /**\n         * 模块名(全局唯一)\n         */\n        name: string;\n        /**\n         * 是否静态，如果为静态模块，则不产生虚拟dom，只需要把该模块对应模版置入容器即可\n         */\n        static ? : boolean;\n        /**\n         * 模型\n         */\n        model ? : Model;\n\n        /**\n         * 是否主模块，一个app只有一个根模块\n         */\n        main ? : boolean;\n\n        /**\n         * 是否是首次渲染\n         */\n        firstRender: boolean;\n        /**\n         * 根虚拟dom\n         */\n        virtualDom: Element;\n        /**\n         * 渲染结束\n         */\n        rendered: boolean;\n        /**\n         * 待渲染树\n         */\n        renderTree: Element;\n        /**\n         * 父模块名\n         */\n        parentName: string;\n        /**\n         * 子模块数组\n         */\n        children: Array < Module > = [];\n        /**\n         * container 选择器\n         */\n        selector: string;\n        /**\n         * 首次渲染后执行操作数组\n         */\n        firstRenderOps: Array < Function > = [];\n        /**\n         * 首次渲染前执行操作数组\n         */\n        beforeFirstRenderOps: Array < Function > = [];\n        /**\n         * 模块容器参数{module:,selector:}\n         */\n        containerParam: object;\n        /**\n         * 状态 0 create(创建)、1 init(初始化，已编译)、2 unactive(渲染后被置为非激活) 3 active(激活，可渲染显示)、4 dead(死亡)\n         */\n        state: number = 0;\n        /**\n         * 数据url\n         */\n        dataUrl: string;\n        /**\n         * 正则初始化\n         */\n        initing:boolean;\n\n        /**\n         * 需要加载新数据\n         */\n        loadNewData: boolean = false;\n        /**\n         * 方法工厂\n         */\n        methodFactory: MethodFactory;\n        /**\n         * 数据模型工厂\n         */\n        modelFactory: ModelFactory;\n        /**\n         * 表达式工厂\n         */\n        expressionFactory: ExpressionFactory;\n        /**\n         * 指令工厂\n         */\n        directiveFactory: DirectiveFactory;\n        /**\n         * 修改渲染的虚拟dom数组\n         */\n        renderDoms: Array < ChangedDom >= [];\n        /**\n         * 初始配置\n         */\n        initConfig: IModuleCfg;\n        /**\n         * 放置模块dom的容器\n         */\n        container: HTMLElement;\n\n        /**\n         * 初始化链式处理器\n         */\n        initLinker:Promise<any>;\n\n        /**\n         * 模版串\n         */\n        template:string;\n\n        /**\n         * 路由容器key\n         */\n        routerKey:number;\n        /**\n         * 构造器\n         * @param config \n         */\n        constructor(config: IModuleCfg,main?:boolean) {\n            // 模块名字\n            if (config.name) {\n                this.name = config.name;\n            } else {\n                this.name = 'Module' + Util.genId();\n            }\n\n            // 把模块添加到工厂\n            ModuleFactory.add(this.name, this);\n\n            this.methodFactory = new MethodFactory(this);\n            this.modelFactory = new ModelFactory(this);\n            this.expressionFactory = new ExpressionFactory(this);\n            this.directiveFactory = new DirectiveFactory(this);\n            this.renderDoms = []; //修改渲染的el数组\n\n            if (config) {\n                //保存config，存在延迟初始化情况\n                this.initConfig = config;\n                //保存container参数\n                if (Util.isString(config.el)) {\n                    this.containerParam = {\n                        module: config.parentName,\n                        selector: config.el\n                    };\n                } else if (Util.isEl(config.el)) { //element\n                    this.container = < HTMLElement > config.el;\n                }\n\n                //方法加入工厂\n                if (Util.isObject(config.methods)) {\n                    Util.getOwnProps(config.methods).forEach((item) => {\n                        this.methodFactory.add(item, config.methods[item]);\n                    });\n                }\n                \n                //清除container的内部内容\n                if (this.hasContainer()) {\n                    this.template = this.container.innerHTML.trim();\n                    this.container.innerHTML = '';\n                }\n\n                //主模块\n                if (main) {\n                    this.main = true;\n                    ModuleFactory.setMain(this);\n                    this.active();\n                }\n\n                //不延迟初始化或为主模块，需要立即初始化\n                if (!config.delayInit || this.main) {\n                    this.init();\n                }\n            }\n        }\n\n        /**\n         * 加载模块\n         * @param callback  加载后的回调函数\n         */\n        init():Promise<any> {\n            //已初始化，不用再初始化\n            if (this.state !== 0 || this.initing) {\n                return this.initLinker;\n            }\n\n            this.initing = true;\n            let config = this.initConfig;\n            let typeArr = []; //请求类型数组\n            let urlArr = []; //请求url数组\n            \n            //app页面根路径\n            let appPath:string = Application.templatePath || '';\n\n            if (Util.isArray(config.requires) && config.requires.length > 0) {\n                const head:HTMLHeadElement = document.head;\n                config.requires.forEach((item) => {\n                    let type:string;\n                    let url:string = '';\n                    if (Util.isObject(item)) { //为对象，可能是css或js\n                        type = item['type'] || 'js';\n                        url += item['url'];\n                    } else { //js文件\n                        type = 'js';\n                        url += item;\n                    }\n                    //如果已经加载，则不再加载\n                    if (type === 'css') {\n                        let css: HTMLLinkElement = <HTMLLinkElement>Util.get(\"link[href='\" + url + \"']\");\n                        if (css !== null) {\n                            return;\n                        }\n                        css = <HTMLLinkElement>Util.newEl('link');\n                        css.type = 'text/css';\n                        css.rel = 'stylesheet'; // 保留script标签的path属性\n                        css.href = url;\n                        head.appendChild(css);\n                        return;\n                    } else if (type === 'js') {\n                        let cs = Util.get(\"script[dsrc='\" + url + \"']\");\n                        if (cs !== null) {\n                            return;\n                        }\n                    }\n                    typeArr.push(type);\n                    urlArr.push(url);\n                });\n            }\n\n            let templateStr:string; \n            //模版信息\n            if(config.template){\n                config.template = config.template.trim();\n                let ch = config.template.substr(0,1);\n                if(ch==='<'){ //html模版串\n                    templateStr = config.template;\n                }else{  //文件\n                    if(config.template.lastIndexOf('.nd') !== config.template.length-3){ //nodom编译文件\n                        typeArr.push('compiled');\n                    }else{  //普通html文件\n                        typeArr.push('template');\n                    }\n                    urlArr.push(appPath + config.template);\n                }\n            }\n            \n            //如果已存在templateStr，则直接编译\n            if (!Util.isEmpty(templateStr)) {\n                this.virtualDom = Compiler.compile(this, templateStr);\n            }\n\n            //数据信息\n            if (config.data) { //数据\n                if(Util.isObject(config.data)){ //数据\n                    this.model = new Model(config.data, this);\n                }else{ //数据文件\n                    typeArr.push('data');\n                    urlArr.push(config.data);\n                    this.dataUrl = <string>config.data;\n                }\n            }\n\n            //批量请求文件\n            if (typeArr.length > 0) {\n                this.initLinker = Linker.gen('getfiles', urlArr).then((files) => {\n                    let head = document.querySelector('head');\n                    files.forEach((file, ind) => {\n                        switch (typeArr[ind]) {\n                        case 'js':\n                            let script = Util.newEl('script');\n                            script.innerHTML = file;\n                            head.appendChild(script);\n                            script.setAttribute('dsrc', urlArr[ind]);\n                            script.innerHTML = '';\n                            head.removeChild(script);\n                            break;\n                        case 'template':\n                            this.virtualDom = Compiler.compile(this, file.trim());\n                            break;\n                        case 'compiled': //预编译后的js文件\n                            let arr = Serializer.deserialize(file, this);\n                            this.virtualDom = arr[0];\n                            this.expressionFactory = arr[1];\n                            break;\n                        case 'data': //数据\n                            this.model = new Model(JSON.parse(file), this);\n                        }\n                    });\n                    //主模块状态变为3\n                    changeState(this);\n                    delete this.initing;\n                });\n            } else {\n                this.initLinker = Promise.resolve();\n                //修改状态\n                changeState(this);\n                delete this.initing;\n            }\n\n            if (Util.isArray(this.initConfig.modules)) {\n                this.initConfig.modules.forEach((item) => {\n                    this.addChild(item);\n                });\n            }\n\n            //初始化后，不再需要initConfig\n            delete this.initConfig;\n            return this.initLinker;\n            /**\n             * 修改状态\n             * @param mod \t模块\n             */\n            function changeState(mod:Module) {\n                if (mod.main) {\n                    mod.state = 3;\n                    //可能不能存在数据，需要手动添加到渲染器\n                    Renderer.add(mod);\n                } else if (mod.parentName) {\n                    mod.state = ModuleFactory.get(mod.parentName).state;\n                } else {\n                    mod.state = 1;\n                }\n            }\n        }\n\n        /**\n         * 模型渲染\n         * @return false 渲染失败 true 渲染成功\n         */\n        render() {\n            //容器没就位或state不为active则不渲染，返回渲染失败\n            if (this.state !== 3 || !this.virtualDom || !this.hasContainer()) {\n                return false;\n            }\n            //克隆新的树\n            let root = this.virtualDom.clone();\n            if (this.firstRender) {\n                //model无数据，如果存在dataUrl，则需要加载数据\n                if (this.loadNewData && this.dataUrl) {\n                    Linker.gen('ajax', {\n                        url: this.dataUrl,\n                        type: 'json'\n                    }).then((r) => {\n                        this.model = new Model(r, this);\n                        this.doFirstRender(root);\n                    });\n                    this.loadNewData = false;\n                } else {\n                    this.doFirstRender(root);\n                }\n            } else { //增量渲染\n                //执行每次渲染前事件\n                this.doModuleEvent('onBeforeRender');\n                if (this.model) {\n                    root.modelId = this.model.id;\n                    let oldTree = this.renderTree;\n                    this.renderTree = root;\n                    //渲染\n                    root.render(this, null);\n\n                    // 比较节点\n                    root.compare(oldTree, this.renderDoms);\n                    // 删除\n                    for (let i = this.renderDoms.length - 1; i >= 0; i--) {\n                        let item:ChangedDom = this.renderDoms[i];\n                        if (item.type === 'del') {\n                            item.node.removeFromHtml(this);\n                            this.renderDoms.splice(i, 1);\n                        }\n                    }\n\n                    // 渲染\n                    this.renderDoms.forEach((item) => {\n                        item.node.renderToHtml(this, item);\n                    });\n                }\n\n                //执行每次渲染后事件，延迟执行\n                setTimeout(() => {\n                    this.doModuleEvent('onRender');\n                }, 0);\n            }\n\n            //数组还原\n            this.renderDoms = [];\n\n            //子模块渲染\n            if (Util.isArray(this.children)) {\n                this.children.forEach(item => {\n                    item.render();\n                });\n            }\n            return true;\n        }\n        /**\n         * 执行首次渲染\n         * @param root \t根虚拟dom\n         */\n        doFirstRender(root) {\n            let me = this;\n            //执行首次渲染前事件\n            this.doModuleEvent('onBeforeFirstRender');\n            this.beforeFirstRenderOps.forEach((foo) => {\n                Util.apply(foo, me, []);\n            });\n            this.beforeFirstRenderOps = [];\n            //渲染树\n            this.renderTree = root;\n            if (this.model) {\n                root.modelId = this.model.id;\n            }\n\n            root.render(me, null);\n\n            //渲染到html\n            if (root.children) {\n                root.children.forEach((item) => {\n                    item.renderToHtml(me, { type: 'fresh' });\n                });\n            }\n\n            //删除首次渲染标志\n            delete this.firstRender;\n            //延迟执行\n            setTimeout(() => {\n                //执行首次渲染后事件\n                this.doModuleEvent('onFirstRender');\n                //执行首次渲染后操作队列\n                this.firstRenderOps.forEach((foo) => {\n                    Util.apply(foo, me, []);\n                });\n                this.firstRenderOps = [];\n            }, 0);\n\n        }\n        // 检查容器是否存在，如果不存在，则尝试找到\n        hasContainer() {\n            if (this.container) {\n                return true;\n            } else if (this.containerParam !== undefined) {\n                let ct;\n                if (this.containerParam['module'] === undefined) { //没有父节点\n                    ct = document;\n                } else {\n                    let module = ModuleFactory.get(this.containerParam['module']);\n                    if (module) {\n                        ct = module.container;\n                    }\n                }\n\n                if (ct) {\n                    this.container = ct.querySelector(this.containerParam['selector']);\n                    return this.container !== null;\n                }\n            }\n            return false;\n        }\n        /**\n         * 数据改变\n         * @param model \t改变的model\n         */\n        dataChange(model) {\n            Renderer.add(this);\n        }\n\n        /**\n         * 添加子模块\n         * @param config \t模块配置 \n         */\n        addChild(config) {\n            const me = this;\n            config.parentName = this.name;\n            let chd = new Module(config);\n            if (this.children === undefined) {\n                this.children = [];\n            }\n            this.children.push(chd);\n            return chd;\n        }\n\n        /**\n         * 发送\n         * @param toName \t\t接收模块名\n         * @param data \t\t\t消息内容\n         */\n        send(toName:string, data:any) {\n            MessageQueue.add(this.name, toName, data);\n        }\n\n\n        /**\n         * 广播给父、兄弟和孩子（第一级）节点\n         */\n        broadcast(data:any) {\n            //兄弟节点\n            if (this.parentName) {\n                let pmod = ModuleFactory.get(this.parentName);\n                if (pmod && pmod.children) {\n                    this.send(pmod.name, data);\n                    pmod.children.forEach((m) => {\n                        //自己不发\n                        if (m === this) {\n                            return;\n                        }\n                        this.send(m.name, data);\n                    });\n                }\n            }\n\n            if (this.children !== undefined) {\n                this.children.forEach((m) => {\n                    this.send(m.name, data);\n                });\n            }\n        }\n\n        /**\n         * 接受消息\n         * @param fromName \t\t来源模块名\n         * @param data \t\t\t消息内容\n         */\n        receive(fromName, data) {\n            this.doModuleEvent('onReceive', [fromName, data]);\n        }\n\n\n        /**\n         * 激活\n         * @param callback \t激活后的回调函数\n         */\n        active(callback?:Function) {\n            const me = this;\n            //激活状态不用激活，创建状态不能激活\n            if (this.state === 3) {\n                return;\n            }\n            let linker;\n            //未初始化，需要先初始化\n            if (this.state === 0) {\n                this.init().then(() => {\n                    this.state = 3;\n                    if (Util.isFunction(callback)) {\n                        callback(this.model);\n                    }\n                    Renderer.add(me);\n                });\n\n            } else {\n                this.state = 3;\n                if (callback) {\n                    callback(this.model);\n                }\n                Renderer.add(me);\n            }\n\n            //子节点\n            if (Util.isArray(this.children)) {\n                this.children.forEach((m) => {\n                    m.active(callback);\n                });\n            }\n            if (!linker) {\n                return Promise.resolve();\n            }\n            return linker;\n        }\n\n        /**\n         * 取消激活\n         */\n        unactive() {\n            const me = this;\n            //主模块不允许取消\n            if (this.main || this.state === 2) {\n                return;\n            }\n            this.state = 2;\n            //设置首次渲染标志\n            this.firstRender = true;\n            delete this.container;\n            if (Util.isArray(this.children)) {\n                this.children.forEach((m) => {\n                    m.unactive();\n                });\n            }\n        }\n\n        /**\n         * 模块终结\n         */\n        dead() {\n            if (this.state === 4) {\n                return;\n            }\n\n            this.state = 4;\n\n            if (Util.isArray(this.children)) {\n                this.children.forEach((m) => {\n                    m.unactive();\n                });\n            }\n        }\n\n        destroy() {\n            if (Util.isArray(this.children)) {\n                this.children.forEach((m) => {\n                    m.destroy();\n                });\n            }\n            //从工厂释放\n            ModuleFactory.remove(this.name);\n        }\n\n\n        /*************事件**************/\n\n        /**\n         * 执行模块事件\n         * @param eventName \t事件名\n         * @param param \t\t参数，为数组\n         */\n        doModuleEvent(eventName:string, param?:Array<any>) {\n            let foo = this.methodFactory.get(eventName);\n            if (!Util.isFunction(foo)) {\n                return;\n            }\n            if (!param) {\n                param = [this.model];\n            } else {\n                param.unshift(this.model);\n            }\n            //调用方法\n            Util.apply(foo, this, param);\n        }\n\n        /**\n         * 添加首次渲染后执行操作\n         * @param foo  \t操作方法\n         */\n        addFirstRenderOperation(foo:Function) {\n            let me = this;\n            if (!Util.isFunction(foo)) {\n                return;\n            }\n            if (this.firstRenderOps.indexOf(foo) === -1) {\n                this.firstRenderOps.push(foo);\n            }\n        }\n\n        /**\n         * 添加首次渲染前执行操作\n         * @param foo  \t操作方法\n         */\n        addBeforeFirstRenderOperation(foo) {\n            let me = this;\n            if (!Util.isFunction(foo)) {\n                return;\n            }\n            if (this.beforeFirstRenderOps.indexOf(foo) === -1) {\n                this.beforeFirstRenderOps.push(foo);\n            }\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n\t * 过滤器工厂，存储模块过滤器\n\t */\n    export class ModuleFactory {\n        static items: Map < string, Module > = new Map();\n        static mainModule: Module;\n        /**\n         * 添加模块到工厂\n         */\n        static add(name:string, item:Module) {\n            this.items.set(name, item);\n        }\n\n        /**\n         * 获得模块\n\t\t * @param name \t模块名\n         */\n        static get(name:string) {\n            return this.items.get(name);\n        }\n\n        /**\n         * 从工厂移除模块\n\t\t * @param name\t模块名\n         */\n        static remove(name:string) {\n            this.items.delete(name);\n        }\n\n\t\t/**\n\t\t * 设置主模块\n\t\t * @param m \t模块 \n\t\t */\n        static setMain(m:Module) {\n            this.mainModule = m;\n        }\n\n\t\t/**\n\t\t * 获取主模块\n\t\t * @returns \t应用的主模块\n\t\t */\n        static getMain() {\n            return this.mainModule;\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\n/**\n * @description 异常处理类\n * @since       0.0.1\n */\nnamespace nodom{\n    export class NodomError extends Error{\n        constructor(errorName:string,p1?:string,p2?:string,p3?:string,p4?:string){\n            super(errorName);\n            let msg:string = nodom.ErrorMsgs[errorName];\n            if(msg === undefined){\n                this.message = \"未知错误\";\n                return;\n            }\n            let params:Array<string> = [];\n            if(p1){\n                params.push(p1);\n            }\n            if(p2){\n                params.push(p2);\n            }\n            if(p3){\n                params.push(p3);\n            }\n            if(p4){\n                params.push(p4);\n            }\n            this.message = Util.compileStr.apply(null,params);\n        }\n    };\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n    /**\n     * 事件类\n     * @remarks\n     * 事件分为自有事件和代理事件\n     * 自有事件绑定在view上\n     * 代理事件绑定在父view上，存储于事件对象的events数组中\n     * 如果所绑定对象已存在该事件名对应的事件，如果是代理事件，则添加到子事件队列，否则替换view自有事件\n     * 事件执行顺序，先执行代理事件，再执行自有事件\n     * \n     * @author      yanglei\n     * @since       1.0\n     */\n    export class NodomEvent {\n        /**\n         * 事件名\n         */\n        name: string;\n        /**\n         * 子事件数组\n         */\n        events: Map<string,Array<NodomEvent>>;\n        /**\n         * 事件处理函数名(需要在模块methods中定义)\n         */\n        handler: string;\n        /**\n         * 代理到父对象\n         */\n        delg: boolean;\n        /**\n         * 禁止冒泡\n         */\n        nopopo: boolean;\n        /**\n         * 只执行一次\n         */\n        once: boolean;\n        /**\n         * 使用 capture\n         */\n        capture: boolean;\n        /**\n         * 模块名\n         */\n        moduleName:string;\n\n        /**\n         * 事件所属虚拟dom的key\n         */\n        domKey:string;\n\n        /**\n         * 事件监听器\n         */\n        handleListener:EventListenerObject;\n        /**\n         * 触屏监听器\n         */\n        touchListeners:Map<string,NodomEvent>;\n\n        /**\n         * 附加参数\n         */\n        extParams:any;\n        /**\n         * @param eventName     事件名\n         * @param eventStr      事件串,以“:”分割,中间不能有空格,结构为: 方法名[:delg(代理到父对象):nopopo(禁止冒泡):once(只执行一次):capture(useCapture)]\n         */\n        constructor(eventName: string, eventStr?: string) {\n            this.name = eventName;\n\n            //如果事件串不为空，则不需要处理\n            if (eventStr) {\n                eventStr.split(':').forEach((item, i) => {\n                    item = item.trim();\n                    if (i === 0) { //事件方法\n                        this.handler = item;\n                    } else { //事件附加参数\n                        switch (item) {\n                        case 'delg':\n                            this.delg = true;\n                            break;\n                        case 'nopopo':\n                            this.nopopo = true;\n                            break;\n                        case 'once':\n                            this.once = true;\n                            break;\n                        case 'capture':\n                            this.capture = true;\n                            break;\n                        }\n                    }\n                });\n            }\n            //设备类型  1:触屏，2:非触屏\t\n            let dtype: number = 'ontouchend' in document ? 1 : 2\n            //触屏事件根据设备类型进行处理\n            if (dtype) { //触屏设备\n                switch (this.name) {\n                case 'click':\n                    this.name = 'tap';\n                    break;\n                case 'mousedown':\n                    this.name = 'touchstart';\n                    break;\n                case 'mouseup':\n                    this.name = 'touchend';\n                    break;\n                case 'mousemove':\n                    this.name = 'touchmove';\n                    break;\n                }\n            } else { //转非触屏\n                switch (this.name) {\n                case 'tap':\n                    this.name = 'click';\n                    break;\n                case 'touchstart':\n                    this.name = 'mousedown';\n                    break;\n                case 'touchend':\n                    this.name = 'mouseup';\n                    break;\n                case 'touchmove':\n                    this.name = 'mousemove';\n                    break;\n                }\n            }\n\n        }\n\n        /**\n         * 事件触发\n         * @param e  事件\n         */\n        fire(e:Event) {\n            const module = ModuleFactory.get(this.moduleName);\n            const dom = module.renderTree.query(this.domKey);\n            if (!module.hasContainer()) {\n                return;\n            }\n            const el:HTMLElement = module.container.querySelector(\"[key='\" + this.domKey + \"']\");\n            const model = module.modelFactory.get(dom.modelId);\n            //如果capture为true，则先执行自有事件，再执行代理事件，否则反之\n            if (this.capture) {\n                handleSelf(e, model, module, el);\n                handleDelg(e, model, module, el);\n            } else {\n                if (handleDelg(e, model, module, el)) {\n                    handleSelf(e, model, module, el);\n                }\n            }\n\n            //判断是否清除事件\n            if (this.events !== undefined && this.events[this.name].length === 0 && this.handler === undefined) {\n                if (ExternalEvent.touches[this.name]) {\n                    ExternalEvent.unregist(this, el);\n                } else {\n                    if (el !== null) {\n                        el.removeEventListener(this.name, this.handleListener);\n                    }\n                }\n            }\n\n            /**\n             * 处理自有事件\n             * @param model     模型\n             * @param e         事件\n             * @param module    模块\n             * @param el        事件element\n             */\n            function handleDelg(e:Event, model:Model, module:Module, el:HTMLElement) {\n                //代理事件执行\n                if (this.events === undefined) {\n                    return true;\n                }\n                let arr = this.events[this.name];\n                if (Util.isArray(arr)) {\n                    if (arr.length > 0) {\n                        for (let i = 0; i < arr.length; i++) {\n                            // 找到对应的子事件执行\n                            if (arr[i].el && arr[i].el.contains(e.target)) {\n                                //执行\n                                arr[i].fire(e);\n                                //执行一次，需要移除\n                                if (arr[i].once) {\n                                    this.removeSubEvt(arr[i]);\n                                }\n                                //禁止冒泡\n                                if (arr[i].nopopo) {\n                                    return false;\n                                }\n                            }\n                        }\n                    } else { //删除该事件\n                        this.events.delete(this.name);\n                    }\n                }\n                return true;\n            }\n\n            /**\n             * 处理自有事件\n             * @param model     模型\n             * @param e         事件\n             * @param module    模块\n             * @param el        事件element\n             */\n            function handleSelf(e:Event, model:Model, module:Module, el:HTMLElement) {\n                let foo:Function = module.methodFactory.get(this.handler);\n                //自有事件\n                if (Util.isFunction(foo)) {\n                    //禁止冒泡\n                    if (this.nopopo) {\n                        e.stopPropagation();\n                    }\n                    Util.apply(foo, model, [e, module, el, dom]);\n                    //事件只执行一次，则删除handler\n                    if (this.once) {\n                        delete this.handler;\n                    }\n                }\n            }\n        }\n\n        /**\n         * 绑定事件\n         * @param module    模块\n         * @param vdom      虚拟dom\n         * @param el        element\n         \n         */\n        bind(module, vdom, el) {\n            const me = this;\n            this.domKey = vdom.key;\n            this.moduleName = module.name;\n            //触屏事件\n            if (ExternalEvent.touches[this.name]) {\n                ExternalEvent.regist(me, el);\n            } else {\n                this.handleListener = el.addEventListener(this.name, function (e) {\n                    this.fire(e);\n                }, this.capture);\n            }\n        }\n\n        /**\n         * \n         * 事件代理到父对象\n         * @param module    模块\n         * @param vdom      虚拟dom\n         * @param el        事件作用的html element \n         * @param parent    父虚拟dom\n         * @param parentEl  父element\n         */\n        delegateTo(module:Module, vdom:Element, el:HTMLElement, parent?:Element, parentEl?:HTMLElement) {\n            const me = this;\n            this.domKey = vdom.key;\n            this.moduleName = module.name;\n\n            //如果不存在父对象，则用body\n            if (!parentEl) {\n                parentEl = document.body;\n            }\n\n            //父节点如果没有这个事件，则新建，否则直接指向父节点相应事件\n            if (!parent.events.includes(this)) {\n                let ev = new NodomEvent(this.name);\n                ev.bind(module, parent, parentEl);\n                parent.events.push(ev);\n            }\n            //添加子事件\n            parent.events[parent.events.indexOf(this)].addSubEvt(me);\n        }\n\n        /**\n         * 添加子事件\n         * @param ev    事件\n         */\n        addSubEvt(ev) {\n            if (!this.events) {\n                this.events = new Map();\n            }\n\n            //事件类型对应的数组\n            if (!this.events.has(this.name)) {\n                this.events.set(this.name,new Array());\n            }\n            this.events.get(this.name).push(ev);\n        }\n\n        /**\n         * 移除子事件\n         * @param ev    子事件\n         */\n        removeSubEvt(ev) {\n            const me = this;\n            if (this.events === undefined || this.events[ev.name] === undefined) {\n                return;\n            }\n            let ind = this.events[ev.name].indexOf(ev);\n            if (ind !== -1) {\n                this.events[ev.name].splice(ind, 1);\n                if (this.events[ev.name].length === 0) {\n                    this.events.delete(ev.name);\n                }\n            }\n        }\n\n        clone() {\n            const me = this;\n            let evt = new Event(this.name);\n            let arr = ['delg', 'once', 'nopopo', 'useCapture', 'handler', 'handleEvent', 'module'];\n            arr.forEach((item) => {\n                evt[item] = me[item];\n            });\n            return evt;\n        }\n    }\n\n    /****************扩展事件*********************/\n\n\n    export class ExternalEvent {\n        /**\n         * 触屏事件\n         */\n        static touches:any = {};\n        /**\n         * 注册事件\n         * @param evtObj    event对象\n         */\n        static regist(evtObj:NodomEvent, el:HTMLElement) {\n            //触屏事件组\n            let touchEvts:any = this.touches.get(evtObj.name);\n            //如果绑定了，需要解绑\n            if (!Util.isEmpty(evtObj.touchListeners)) {\n                this.unregist(evtObj);\n            }\n\n            if (!el) {\n                const module = ModuleFactory.get(evtObj.moduleName);\n                el = module.container.querySelector(\"[key='\" + evtObj.domKey + \"']\");\n            }\n\n            // el不存在\n            evtObj.touchListeners = new Map();\n            if (touchEvts && el !== null) {\n                // 绑定事件组\n                Util.getOwnProps(touchEvts).forEach(function (ev) {\n                    //先记录下事件，为之后释放\n                    evtObj.touchListeners[ev] = function (e) {\n                        touchEvts[ev](e, evtObj);\n                    }\n                    el.addEventListener(ev, evtObj.touchListeners[ev], evtObj.capture);\n                });\n            }\n        }\n\n        /**\n         * 取消已注册事件\n         * @param evtObj    event对象\n         * @param el        事件绑定的html element\n         */\n        static unregist(evtObj:NodomEvent, el?:HTMLElement) {\n            const evt = ExternalEvent.touches.get(evtObj.name);\n            if (!el) {\n                const module = ModuleFactory.get(evtObj.moduleName);\n                el = module.container.querySelector(\"[key='\" + evtObj.domKey + \"']\");\n            }\n            if (evt) {\n                // 解绑事件\n                if (el !== null) {\n                    Util.getOwnProps(evtObj.touchListeners).forEach(function (ev) {\n                        el.removeEventListener(ev, evtObj.touchListeners[ev]);\n                    });\n                }\n            }\n        }\n\n    }\n\n    /**\n     * 触屏事件\n     */\n    ExternalEvent.touches={\n        tap: {\n            touchstart: function (e:TouchEvent, evtObj:NodomEvent) {\n                let tch = e.touches[0];\n                evtObj.extParams = {\n                    pos: { sx: tch.pageX, sy: tch.pageY, t: Date.now() }\n                }\n            },\n            touchmove: function (e:TouchEvent, evtObj:NodomEvent) {\n                let pos = evtObj.extParams.pos;\n                let tch = e.touches[0];\n                let dx = tch.pageX - pos.sx;\n                let dy = tch.pageY - pos.sy;\n                //判断是否移动\n                if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\n                    pos.move = true;\n                }\n            },\n            touchend: function (e:TouchEvent, evtObj:NodomEvent) {\n                let pos = evtObj.extParams.pos;\n                let dt = Date.now() - pos.t;\n                //点下时间不超过200ms\n                if (pos.move === true || dt > 200) {\n                    return;\n                }\n                evtObj.fire(e);\n            }\n        },\n        swipe: {\n            touchstart: function (e:TouchEvent, evtObj:NodomEvent) {\n                let tch = e.touches[0];\n                let t = Date.now();\n                evtObj.extParams = {\n                    swipe: {\n                        oldTime: [t, t],\n                        speedLoc: [{ x: tch.pageX, y: tch.pageY }, { x: tch.pageX, y: tch.pageY }],\n                        oldLoc: { x: tch.pageX, y: tch.pageY }\n                    }\n                }\n            },\n            touchmove: function (e:TouchEvent, evtObj:NodomEvent) {\n                let nt = Date.now();\n                let tch = e.touches[0];\n                let mv = evtObj.extParams['swipe'];\n                //50ms记录一次\n                if (nt - mv.oldTime > 50) {\n                    mv.speedLoc[0] = { x: mv.speedLoc[1].x, y: mv.speedLoc[1].y };\n                    mv.speedLoc[1] = { x: tch.pageX, y: tch.pageY };\n                    mv.oldTime[0] = mv.oldTime[1];\n                    mv.oldTime[1] = nt;\n                }\n                mv.oldLoc = { x: tch.pageX, y: tch.pageY };\n            },\n            touchend: function (e:any, evtObj:NodomEvent) {\n                let mv = evtObj.extParams['swipe'];\n                let nt = Date.now();\n\n                //取值序号 0 或 1，默认1，如果释放时间与上次事件太短，则取0\n                let ind = (nt - mv.oldTime[1] < 30) ? 0 : 1;\n                let dx = mv.oldLoc.x - mv.speedLoc[ind].x;\n                let dy = mv.oldLoc.y - mv.speedLoc[ind].y;\n                let s = Math.sqrt(dx * dx + dy * dy);\n                let dt = nt - mv.oldTime[ind];\n                //超过300ms 不执行事件\n                if (dt > 300 || s < 10) {\n                    return;\n                }\n                let v0 = s / dt;\n                //速度>0.1,触发swipe事件\n                if (v0 > 0.05) {\n                    let sname = '';\n                    if (dx < 0 && Math.abs(dy / dx) < 1) {\n                        e.v0 = v0; //添加附加参数到e\n                        sname = 'swipeleft';\n                    }\n                    if (dx > 0 && Math.abs(dy / dx) < 1) {\n                        e.v0 = v0;\n                        sname = 'swiperight';\n                    }\n                    if (dy > 0 && Math.abs(dx / dy) < 1) {\n                        e.v0 = v0;\n                        sname = 'swipedown';\n                    }\n                    if (dy < 0 && Math.abs(dx / dy) < 1) {\n                        e.v0 = v0;\n                        sname = 'swipeup';\n                    }\n                    if (evtObj.name === sname) {\n                        evtObj.fire(e);\n                    }\n                }\n            }\n        }\n    }\n\n    //swipe事件\n    ExternalEvent.touches['swipeleft'] = ExternalEvent.touches['swipe'];\n    ExternalEvent.touches['swiperight'] = ExternalEvent.touches['swipe'];\n    ExternalEvent.touches['swipeup'] = ExternalEvent.touches['swipe'];\n    ExternalEvent.touches['swipedown'] = ExternalEvent.touches['swipe'];\n}\n\n","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n\t * 渲染器\n\t */\n    export class Renderer {\n\t\t/**\n\t\t * 等待渲染列表（模块名）\n\t\t */\n        static waitList: Array < string > = [];\n        /**\n         * 添加到渲染列表\n         * @param module 模块\n         */\n        static add(module:Module) {\n            //非激活状态\n            if (module.state !== 3) {\n                return;\n            }\n            //如果已经在列表中，不再添加\n            if (this.waitList.indexOf(module.name) === -1) {\n                //计算优先级\n                this.waitList.push(module.name);\n            }\n        }\n        //从列表移除\n        static remove(module:Module) {\n            let ind;\n            if ((ind = this.waitList.indexOf(module.name)) !== -1) {\n                this.waitList.splice(ind, 1);\n            }\n        }\n\n        /**\n         * 队列渲染\n         */\n        static render() {\n            //调用队列渲染\n            for (let i = 0; i < Renderer.waitList.length; i++) {\n                let m = ModuleFactory.get(this.waitList[i]);\n                if (!m || m.render()) {\n                \tthis.waitList.splice(i--, 1);\n                }\n            }\n        }\n    }\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom {\n\t/**\n\t * 路由配置\n\t */\n\texport interface IRouteCfg{\n\t\t/**\n\t\t * 路由路径，可以带通配符*，可以带参数 /:\n\t\t */\n\t\tpath:string;\n\t\t/**\n\t\t * 路由模块名或模块\n\t\t */\n\t\tmodule?:string|Module;\n\t\t/**\n\t\t * 子路由数组\n\t\t */\n\t\troutes?:Array<IRouteCfg>;\n\n\t\t/**\n\t\t * 进入路由事件方法\n\t\t */\n\t\tonEnter?:Function;\n\t\t/**\n\t\t * 离开路由方法\n\t\t */\n\t\tonLeave?:Function;\n\t\t/**\n\t\t * 是否使用父路由路径\n\t\t */\n\t\tuseParentPath?:boolean;\n\t\t/**\n\t\t * 不添加到路由树\n\t\t */\n\t\tnotAdd?:boolean;\n\t\t/**\n\t\t * 父路由\n\t\t */\n\t\tparent?:Route;\n\t}\n\t\n\t/**\n     * 路由，主要用于模块间跳转，一个应用中存在一个router，多个route\n     * 采用修改页面hash方式进行路由历史控制，每个route 可设置onEnter事件(钩子) 和 onLeave事件(钩子)\n     * 回调调用的几个问题\n     * onLeave事件在路由切换时响应，如果存在多级路由切换，则从底一直到相同祖先路由，都会进行onLeave事件响应\n     *  如：从/r1/r2/r3  到 /r1/r4/r5，则onLeave响应顺序为r3、r2\n     *  onEnter事件则从上往下执行\n\t * @author \t\tyanglei\n     * @since \t\t1.0.0\n     * @date\t\t2017-01-21\n     */\n    export class Router {\n\t\t/**\n\t\t * 加载中标志\n\t\t */\n\t\tstatic loading:boolean = false;\n\t\t/**\n\t\t * 路由map\n\t\t */\n\t\tstatic routes:Map<number,Route> = new Map();\n\t\t/**\n\t\t * 当前路径\n\t\t */\n\t\tstatic currentPath:string = '';\n\t\t/**\n\t\t * 显示路径（useParentPath时，实际路由路径与显示路径不一致）\n\t\t */\n\t\tstatic showPath:string = '';\n\t\t/**\n\t\t * path等待链表\n\t\t */\n\t\tstatic waitList:Array<string> = []; \n\t\t/**\n\t\t * 当前路由在路由链中的index\n\t\t */\n\t\tstatic currentIndex:number = 0;\n\t\t/**\n\t\t * 默认路由进入事件方法\n\t\t */\n\t\tstatic onDefaultEnter:Function;\n\t\t/**\n\t\t * 默认路由离开事件\n\t\t */\n\t\tstatic onDefaultLeave:Function; \n\t\t/**\n\t\t * module 和 route映射关系 {moduleName:routeId,...}\n\t\t */\n\t\tstatic moduleRouteMap:Map<string,number> = new Map();\n\n\t\t/**\n\t\t * 启动方式 0:直接启动 1:由element active改变启动 2:popstate 启动\n\t\t */\n\t\tstatic startStyle:number = 0;\n\t\n        /**\n         * 往路由管理器中添加路径\n         * @param path \t路径 \n         */\n        static addPath(path:string) {\n            for (let i = 0; i < this.waitList.length; i++) {\n                let li:string = this.waitList[i];\n                //相等，则不加入队列\n                if (li === path) {\n                    return;\n                }\n                //父路径，不加入\n                if (li.indexOf(path) === 0 && li.substr(path.length + 1,1) === '/') {\n                    return;\n                }\n            }\n            this.waitList.push(path);\n            this.load();\n        }\n\n        /**\n         * 启动加载\n         */\n        static load() {\n            //在加载，或无等待列表，则返回\n            if (this.loading || this.waitList.length === 0) {\n                return;\n            }\n            let path = this.waitList.shift();\n            this.loading = true;\n            this.start(path);\n        }\n\n        /**\n         * 切换路由\n         * @param path \t路径\n         */\n        static start(path:string) {\n            let diff = this.compare(this.currentPath, path);\n\n            //获得当前模块，用于寻找router view\n            let parentModule = diff[0] === null ? ModuleFactory.getMain() : ModuleFactory.get(diff[0].module);\n            //onleave事件，从末往前执行\n            for (let i = diff[1].length - 1; i >= 0; i--) {\n                const r = diff[1][i];\n                if (!r.module) {\n                    continue;\n                }\n                let module = ModuleFactory.get(r.module);\n                if (Util.isFunction(this.onDefaultLeave)) {\n                    this.onDefaultLeave(module.model);\n                }\n                if (Util.isFunction(r.onLeave)) {\n                    r.onLeave(module.model);\n                }\n                //module置为不激活\n                module.unactive();\n            }\n\n            let operArr:Array<Function> = []; \t//待操作函数数组\n            let paramArr:Array<any> = []; \t\t//函数对应参数数组\n            let showPath:string; \t\t\t\t//实际要显示的路径\n\n            //设置active\n            if (diff[2].length === 0) { //路由相同，参数不同\n                if (diff[0] !== null) {\n                    setRouteParamToModel(diff[0]);\n                    //用父路由路径\n                    if (!diff[0].useParentPath) {\n                        showPath = diff[0].fullPath;\n                    }\n                    diff[0].setLinkActive(true);\n                }\n            } else { //路由不同\n                //加载模块\n                for (let i = 0; i < diff[2].length; i++) {\n                    let route = diff[2][i];\n                    //路由不存在或路由没有模块（空路由？）\n                    if (!route || !route.module) {\n                        continue;\n                    }\n\n                    if (!route.useParentPath) {\n                        showPath = route.fullPath;\n                    }\n\n                    if (!parentModule.routerKey) {\n                        throw new NodomError('notexist', TipWords.routeView);\n                    }\n\n                    //构建module route map\n                    Router.moduleRouteMap[route.module] = route.id;\n                    //参数数组\n                    paramArr.push(route.module);\n\n                    //操作数组\n                    operArr.push(\n                        (resolve, reject, moduleName) => {\n                            let module = ModuleFactory.get(moduleName);\n                            //添加before first render 操作\n                            module.addBeforeFirstRenderOperation(function () {\n                                //清空模块容器\n                                Util.empty(module.container);\n                            });\n                            //保留container参数\n                            module.containerParam = {\n                                module: parentModule.name,\n                                selector: \"[key='\" + parentModule.routerKey + \"']\"\n                            }\n\n                            //激活模块\n                            module.active((model) => {\n                                let route:Route = Router.routes.get(Router.moduleRouteMap[module.name]);\n                                if (!route) {\n                                    return;\n                                }\n                                route.setLinkActive(true);\n                                delete Router.moduleRouteMap[module.name];\n                                setRouteParamToModel(route);\n                                if (Util.isFunction(this.onDefaultEnter)) {\n                                    this.onDefaultEnter(model);\n                                }\n                                if (Util.isFunction(route.onEnter)) {\n                                    route.onEnter(model);\n                                }\n                                parentModule = module;\n                                if (resolve) {\n                                    resolve();\n                                }\n                            });\n                        }\n                    );\n                }\n            }\n            if (!showPath) {\n                if (!this.getRoute(path)) {\n                    throw new NodomError('notexist1', TipWords.route, path);\n                }\n            }\n\n            //如果是history popstate，则不加入history\n            if (this.startStyle !== 2 && showPath) {\n                //子路由，替换state\n                if (this.showPath && showPath.indexOf(this.showPath) === 0) {\n                    history.replaceState(path, '', Application.routerPrePath + showPath);\n                } else { //路径push进history\n                    history.pushState(path, '', Application.routerPrePath + showPath);\n                }\n                //设置显示路径\n                this.showPath = showPath;\n            }\n\n            if (operArr.length === 0) {\n                Router.loading = false;\n                Router.startStyle = 0;\n                return;\n            }\n\n            //修改currentPath\n            this.currentPath = path;\n\n            //同步加载模块\n            Linker.gen(\"dolist\", {funcs:operArr, params:paramArr}).then(() => {\n                Router.loading = false;\n                this.load();\n                Router.startStyle = 0;\n            }).catch((e) => {\n                throw e;\n            });\n\n            /**\n             * 将路由参数放入model\n             * @param route \t路由\n             */\n            function setRouteParamToModel(route:Route) {\n                if (!route) {\n                    return;\n                }\n                const module:Module = ModuleFactory.get(route.module);\n                let model:Model = module.model;\n                let o = {\n                    path: route.path\n                };\n                if (!Util.isEmpty(route.data)) {\n                    o['data'] = route.data;\n                }\n                if (!model) {\n                    module.model = new Model({ $route: o }, module);\n                } else {\n                    model.data['$route'] = o;\n                }\n                Renderer.add(module);\n            }\n        }\n\n        /*\n         * 重定向\n         * @param path \t路径\n         */\n        static redirect(path:string) {\n            this.addPath(path);\n        }\n\n        /**\n         * 添加路由\n         * @param route \t路由配置 \n         * @param parent \t父路由 \n         */\n        static addRoute(route:Route, parent:Route) {\n            //加入router tree\n            if (RouterTree.add(route, parent) === false) {\n                throw new NodomError(\"exist1\", TipWords.route, route.path);\n            }\n\n            //加入map\n            this.routes.set(route.id, route);\n        }\n\n        /**\n         * 获取路由\n         * @param path \t路径\n         * @param last \t是否获取最后一个路由,默认false\n         */\n        static getRoute(path:string, last?:boolean):Array<Route> {\n            if (!path) {\n                return null;\n            }\n\n            let routes:Array<Route> = RouterTree.get(path);\n            if (routes === null || routes.length === 0) {\n                return null;\n            }\n            //routeid 转route\n            if (last) { //获取最后一个\n                return [routes[routes.length - 1]];\n            } else { //获取所有\n                return routes;\n            }\n        }\n\n        /**\n         * 比较两个路径对应的路由链\n         * @param path1 \t第一个路径\n         * @param path2 \t第二个路径\n         * @returns \t\t[不同路由的父路由，第一个需要销毁的路由数组，第二个需要增加的路由数组，第二个路由]\n         */\n        static compare(path1:string, path2:string):Array<any> {\n            \n            // 获取路由id数组\n            let arr1:Array<Route> = null;\n            let arr2:Array<Route> = null;\n\n            if (path1) {\n                arr1 = this.getRoute(path1);\n            }\n            if (path2) {\n                arr2 = this.getRoute(path2);\n            }\n\n            let len = 0;\n            if (arr1 !== null) {\n                len = arr1.length;\n            }\n\n            if (arr2 !== null) {\n                if (arr2.length < len) {\n                    len = arr2.length;\n                }\n            } else {\n                len = 0;\n            }\n\n            let retArr1 = [];\n            let retArr2 = [];\n            let i = 0;\n\n            for (i = 0; i < len; i++) {\n                //找到不同路由开始位置\n                if (arr1[i].id === arr2[i].id) {\n                    //比较参数\n                    if (JSON.stringify(arr1[i].data) !== JSON.stringify(arr2[i].data)) {\n                        //从后面开始更新，所以需要i+1\n                        i++;\n                        break;\n                    }\n                } else {\n                    break;\n                }\n            }\n            //旧路由改变数组\n            if (arr1 !== null) {\n                for (let j = i; j < arr1.length; j++) {\n                    retArr1.push(arr1[j]);\n                }\n            }\n\n            //新路由改变数组（相对于旧路由）\n            if (arr2 !== null) {\n                for (let j = i; j < arr2.length; j++) {\n                    retArr2.push(arr2[j]);\n                }\n            }\n\n            //上一级路由和上二级路由\n            let p1:Route = null;\n            let p2:Route = null;\n            if (arr1 !== null && i > 0) {\n                for (let j = i - 1; j >= 0 && (p1 === null || p2 === null); j--) {\n                    if (arr1[j].module !== undefined) {\n                        if (p1 === null) {\n                            p1 = arr1[j];\n                        } else if (p2 === null) {\n                            p2 = arr1[j];\n                        }\n                    }\n                }\n            }\n            return [p1, retArr1, retArr2, p2];\n        }\n\n        /**\n         * 修改模块active view（如果为view active为true，则需要路由跳转）\n         * @param module \t模块\n         * @param path \t\tview对应的route路径\n         */\n        static changeActive(module, path) {\n            if (!module || !path || path === '' || !module.routerActiveViews) {\n                return;\n            }\n            //遍历router active view，设置或取消active class\n            module.routerActiveViews.forEach((item) => {\n                let dom = module.renderTree.query(item);\n                if (!dom) {\n                    return;\n                }\n                // dom route 路径\n                let domPath = dom.props['path'];\n                if (dom.exprProps.hasOwnProperty('active')) { // active属性为表达式，修改字段值\n                    let model = module.modelFactory.get(dom.modelId);\n                    if (!model) {\n                        return;\n                    }\n\n                    let expr = module.expressionFactory.get(dom.exprProps['active'][0]);\n                    if (!expr) {\n                        return;\n                    }\n                    let field = expr.fields[0];\n                    //路径相同或参数路由路径前部分相同则设置active 为true，否则为false\n                    if (path === domPath || path.indexOf(domPath + '/') === 0) {\n                        model.data[field] = true;\n                    } else {\n                        model.data[field] = false;\n                    }\n                } else if (dom.props.hasOwnProperty('active')) { //active值属性\n                    //路径相同或参数路由路径前部分相同则设置active 为true，否则为false\n                    if (path === domPath || path.indexOf(domPath + '/') === 0) {\n                        dom.props['active'] = true;\n                    } else {\n                        dom.props['active'] = false;\n                    }\n                }\n            });\n\n        }\n    }\n\n\t/**\n\t * 路由类\n\t */\n    export class Route {\n\t\t/**\n\t\t * 路由id\n\t\t */\n\t\tid:number;\n\t\t/**\n\t\t * 路由参数名数组\n\t\t */\n\t\tparams:Array<string> = [];\n\t\t/**\n\t\t * 路由参数数据\n\t\t */\n\t\tdata:any = {};\n\t\t/**\n\t\t * 子路由\n\t\t */\n\t\tchildren:Array<Route> = [];\n\t\t/**\n\t\t * 进入路由事件方法\n\t\t */\n\t\tonEnter:Function;\n\t\t/**\n\t\t * 离开路由方法\n\t\t */\n\t\tonLeave:Function;\n\t\t/**\n\t\t * 是否使用父路由路径\n\t\t */\n\t\tuseParentPath:boolean;\n\t\t/**\n\t\t * 路由路径\n\t\t */\n\t\tpath:string;\n\t\t/**\n\t\t * 完整路径\n\t\t */\n\t\tfullPath:string;\n\t\t/**\n\t\t * 路由对应模块\n\t\t */\n\t\tmodule:string;\n\t\t/**\n\t\t * 父路由\n\t\t */\n\t\tparent:Route;\n\t\t/**\n\t\t * \n\t\t * @param config 路由配置项\n\t\t */\n        constructor(config:IRouteCfg) {\n            this.onEnter = config.onEnter;\n            this.onLeave = config.onLeave;\n            this.useParentPath = config.useParentPath;\n            this.path = config.path;\n            this.module = config.module instanceof Module ? config.module.name : config.module;\n\n            if (config.path === '') {\n                return;\n            }\n\n            this.id = Util.genId();\n\n            if (!config.notAdd) {\n                Router.addRoute(this, config.parent);\n            }\n\n            //子路由\n            if (Util.isArray(config.routes)) {\n                config.routes.forEach((item) => {\n                    item.parent = this;\n                    new Route(item);\n                });\n            }\n        }\n        /**\n         * 设置关联标签激活状态\n         * @param ancestor \t\t是否激活祖先路由 true/false\n         */\n        setLinkActive(ancestor:boolean) {\n            let path = this.fullPath;\n            let module = ModuleFactory.get(this.module);\n            if (module && module.containerParam) {\n                let pm = ModuleFactory.get(module.containerParam['module']);\n                if (pm) {\n                    Router.changeActive(pm, path);\n                }\n            }\n            if (ancestor && this.parent) {\n                this.parent.setLinkActive(true);\n            }\n        }\n    }\n\n    /**\n     * 路由树类\n     */\n    class RouterTree {\n\t\tstatic root:Route;\n        /**\n         * 添加route到路由树\n         *\n         * @param route 路由\n         * @return 添加是否成功 type Boolean\n         */\n        static add(route:Route, parent:Route) {\n            \n            //创建根节点\n            if (!this.root) {\n                this.root = new Route({ path: \"\", notAdd: true });\n            }\n            let pathArr:Array<string> = route.path.split('/');\n            let node:Route = parent || this.root;\n            let param:Array<string> = [];\n            let paramIndex:number = -1; //最后一个参数开始\n            let prePath:string = ''; //前置路径\n            for (let i = 0; i < pathArr.length; i++) {\n                let v = pathArr[i].trim();\n                if (v === '') {\n                    pathArr.splice(i--, 1);\n                    continue;\n                }\n\n                if (v.startsWith(':')) { //参数\n                    if (param.length === 0) {\n                        paramIndex = i;\n                    }\n                    param.push(v.substr(1));\n                } else {\n                    paramIndex = -1;\n                    param = []; //上级路由的参数清空\n                    route.path = v; //暂存path\n                    let j = 0;\n                    for (; j < node.children.length; j++) {\n                        let r = node.children[j];\n                        if (r.path === v) {\n                            node = r;\n                            break;\n                        }\n                    }\n\n                    //没找到，创建新节点\n                    if (j === node.children.length) {\n                        if (prePath !== '') {\n                            node.children.push(new Route({ path: prePath, notAdd: true }));\n                            node = node.children[node.children.length - 1];\n                        }\n                        prePath = v;\n                    }\n                }\n\n                //不存在参数\n                if (paramIndex === -1) {\n                    route.params = [];\n                } else {\n                    route.params = param;\n                }\n            }\n\n            //添加到树\n            if (node !== undefined && node !== route) {\n                route.path = prePath;\n                node.children.push(route);\n            }\n            return true;\n        }\n\n        /**\n         * 从路由树中获取路由节点\n         * @param path  \t路径\n         */\n        static get(path:string):Array<Route> {\n            \n            if (!this.root) {\n                throw new NodomError(\"notexist\", TipWords.root);\n            }\n            let pathArr = path.split('/');\n            let node = this.root;\n            let paramIndex = 0;\n            let retArr = [];\n            let fullPath = ''; //完整路径\n            let preNode = this.root; //前一个节点\n\n            for (let i = 0; i < pathArr.length; i++) {\n                let v = pathArr[i].trim();\n                if (v === '') {\n                    continue;\n                }\n                let find = false;\n                for (let j = 0; j < node.children.length; j++) {\n                    if (node.children[j].path === v) {\n                        //设置完整路径\n                        if (preNode !== this.root) {\n                            preNode.fullPath = fullPath;\n                            preNode.data = node.data;\n                            retArr.push(preNode);\n                        }\n\n                        //设置新的查找节点\n                        node = node.children[j];\n                        //参数清空\n                        node.data = {};\n                        preNode = node;\n                        find = true;\n                        break;\n                    }\n                }\n                //路径叠加\n                fullPath += '/' + v;\n                //不是孩子节点,作为参数\n                if (!find) {\n                    if (paramIndex < node.params.length) { //超出参数长度的废弃\n                        node.data[node.params[paramIndex++]] = v;\n                    }\n                }\n            }\n\n            //最后一个节点\n            if (node !== this.root) {\n                node.fullPath = fullPath;\n                retArr.push(node);\n            }\n            return retArr;\n        }\n    }\n\n\n    //处理popstate事件\n    window.addEventListener('popstate', function (e) {\n        //根据state切换module\n        const state = history.state;\n        if (!state) {\n            return;\n        }\n        Router.startStyle = 2;\n        Router.addPath(state);\n    });\n\n\n    /**\n     * 增加route指令\n     */\n    DirectiveManager.addType('route', {\n        init: (directive, dom, module) => {\n            let value = directive.value;\n            if (Util.isEmpty(value)) {\n                return;\n            }\n\n            //a标签需要设置href\n            if (dom.tagName === 'A') {\n                dom.props['href'] = 'javascript:void(0)';\n            }\n            let dirObj = {};\n            // 表达式处理\n            if (value && value.substr(0, 2) === '{{' && value.substr(value.length - 2, 2) === '}}') {\n                let expr = new Expression(value.substring(2, value.length - 2), module);\n                dom.exprProps['path'] = expr;\n                directive.value = expr;\n            } else {\n                dom.props['path'] = value;\n            }\n\n            //添加click事件\n            let method = '$nodomGenMethod' + Util.genId();\n            module.methodFactory.add(method,\n                (e, module, view, dom) => {\n                    let path = dom.props['path'];\n                    if (!path) {\n                        return;\n                    }\n                    Router.addPath(path);\n                }\n            );\n            dom.events['click'] = new NodomEvent('click', method);\n        },\n\n        handle: (directive, dom, module, parent) => {\n            //添加到active view 队列\n            if (!module.routerActiveViews) {\n                module.routerActiveViews = [];\n            }\n\n            if (module.routerActiveViews.indexOf(dom.key) === -1) {\n                //设置已添加标志，避免重复添加\n                module.routerActiveViews.push(dom.key);\n                if (dom.props.hasOwnProperty('active')) {\n                    let route = Router.getRoute(dom.props['path'], true);\n                    if (route === null) {\n                        return;\n                    }\n                }\n            }\n\n            let path = dom.props['path'];\n            if (path === Router.currentPath) {\n                return;\n            }\n            //active需要跳转路由（当前路由为该路径对应的父路由）\n            if (dom.props['active'] && dom.props['active'] !== 'false' && (!Router.currentPath || path.indexOf(Router.currentPath) === 0)) {\n                Router.addPath(path);\n            }\n        }\n    });\n\n    /**\n     * 增加router指令\n     */\n    DirectiveManager.addType('router', {\n        init: (directive, dom, module) => {\n            module.routerKey = dom.key;\n        },\n        handle: (directive, dom, module, parent) => {\n            return;\n        }\n    });\n}","/// <reference path=\"nodom.ts\" />\nnamespace nodom{\n\t/**\n\t * 调度器，用于每次空闲的待操作序列调度\n\t */\n\texport class Scheduler{\n\t\tstatic tasks:Array<Function> = [];\n\t\tstatic dispatch(){\n\t\t\tScheduler.tasks.forEach((foo)=>{\n\t\t\t\tif(Util.isFunction(foo)){\n\t\t\t\t\tfoo();\t\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tstatic start(){\n\t\t\tScheduler.dispatch();\n\t\t\tif(window.requestAnimationFrame){\n\t\t\t\twindow.requestAnimationFrame(Scheduler.start);\n\t\t\t}else{\n\t\t\t\twindow.setTimeout(Scheduler.start,Application.renderTick);\n\t\t\t}\t\t\n\t\t}\n\n\t\t/**\n\t\t * 添加任务\n\t\t * @param foo \t任务\n\t\t */\n\t\tstatic addTask(foo){\n\t\t\tif(!Util.isFunction(foo)){\n\t\t\t\tthrow new NodomError(\"invoke\",\"Scheduler.addTask\",\"0\",\"function\");\n\t\t\t}\n\t\t\tif(Scheduler.tasks.indexOf(foo) !== undefined){\n\t\t\t\tScheduler.tasks.push(foo);\t\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 移除任务\n\t\t * @param foo \t任务\n\t\t */\n\t\tstatic removeTask(foo){\n\t\t\tif(!Util.isFunction(foo)){\n\t\t\t\tthrow new NodomError(\"invoke\",\"Scheduler.removeTask\",\"0\",\"function\");\n\t\t\t}\n\t\t\tlet ind = -1;\n\t\t\tif((ind = Scheduler.tasks.indexOf(foo)) !== -1){\n\t\t\t\tScheduler.tasks.splice(ind,1);\n\t\t\t}\t\n\t\t}\n\t}\n}\n\n","/// <reference path=\"nodom.ts\" />\nnamespace nodom{\n\t/**\n\t *  编译器\n\t *  描述：用于进行预编译和预编译后的json串反序列化，处理两个部分：虚拟dom树和表达式工厂\n\t */\n\texport class Serializer{\n\t\t/**\n\t\t * 序列化，只序列化 virtualDom、expressionFactory\n\t\t * @param module \t模块\n\t\t * @return   \t\tjsonstring\n\t\t */\n\t\tstatic serialize(module:Module){\n\t\t\tlet props:Array<string> = ['virtualDom','expressionFactory'];\n\t\t\tlet jsonStr:string = '[';\n\n\t\t\tprops.forEach((p,i)=>{\n\t\t\t\taddClsName(module[p]);\n\t\t\t\tlet s = JSON.stringify(module[p]);\n\t\t\t\tjsonStr += s;\n\t\t\t\tif(i<props.length-1){\n\t\t\t\t\tjsonStr += ',';\n\t\t\t\t}else{\n\t\t\t\t\tjsonStr += ']'\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn jsonStr;\n\n\t\t\t/**\n\t\t\t * 为对象添加class name（递归执行）\n\t\t\t * @param obj \t对象\n\t\t\t */\n\t\t\tfunction addClsName(obj:any){\n\t\t\t\tif(typeof obj !== 'object'){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tobj.className = obj.constructor.name;\n\t\t\t\t\n\t\t\t\tUtil.getOwnProps(obj).forEach((item)=>{\n\t\t\t\t\tif(Util.isArray(obj[item])){\n\t\t\t\t\t\t//删除空数组\n\t\t\t\t\t\tif(obj[item].length === 0){\n\t\t\t\t\t\t\tdelete obj[item];\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tobj[item].forEach((item1)=>{\n\t\t\t\t\t\t\t\taddClsName(item1);\n\t\t\t\t\t\t\t});\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(typeof obj[item] === 'object'){\n\t\t\t\t\t\t//删除空对象\n\t\t\t\t\t\tif(Util.isEmpty(obj[item])){\n\t\t\t\t\t\t\tdelete obj[item];\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\taddClsName(obj[item]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * 反序列化\n\t\t * @param jsonStr \tjson串\n\t\t * @param module \t模块\n\t\t * @returns \t\t[virtualDom,expressionFactory]\t\n\t\t */\n\t\tstatic deserialize(jsonStr:string,module:Module){\n\t\t\tlet jsonArr = JSON.parse(jsonStr);\n\t\t\t\n\t\t\tlet arr = [];\n\t\t\tlet vdom; //虚拟dom\n\t\t\tjsonArr.forEach((item)=>{\n\t\t\t\tarr.push(handleCls(item));\n\t\t\t});\n\n\t\t\treturn arr;\n\n\t\t\tfunction handleCls(jsonObj){\n\t\t\t\tif(!Util.isObject(jsonObj)){\n\t\t\t\t\treturn jsonObj;\n\t\t\t\t}\n\n\t\t\t\tif(jsonObj.moduleName){\n\t\t\t\t\tjsonObj.moduleName = module.name;\n\t\t\t\t}\n\n\t\t\t\tlet retObj;\n\t\t\t\tif(jsonObj.hasOwnProperty('className')){\n\t\t\t\t\tconst cls:string = jsonObj['className'];\n\t\t\t\t\tlet param = [];\n\t\t\t\t\t//指令需要传入参数\n\t\t\t\t\tswitch(cls){\n\t\t\t\t\t\tcase 'Directive':\n\t\t\t\t\t\t\tparam = [jsonObj['type'],jsonObj['value'],vdom,module];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Event':\n\t\t\t\t\t\t\tparam = [jsonObj['name']];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlet clazz:any = eval(cls);\n\t\t\t\t\t// retObj = new .newInstance(cls,param);\n\t\t\t\t\tif(cls === 'Element'){\n\t\t\t\t\t\tvdom = retObj;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tretObj = {};\n\t\t\t\t}\n\n\t\t\t\t//子对象可能用到父对象属性，所以子对象要在属性赋值后处理\n\t\t\t\tlet objArr = [];  //子对象\n\t\t\t\tlet arrArr = [];  //子数组\n\t\t\t\tUtil.getOwnProps(jsonObj).forEach((item)=>{\n\t\t\t\t\t//子对象\n\t\t\t\t\tif(Util.isObject(jsonObj[item])){\n\t\t\t\t\t\tobjArr.push(item);\n\t\t\t\t\t}else if(Util.isArray(jsonObj[item])){ //子数组\n\t\t\t\t\t\tarrArr.push(item);\n\t\t\t\t\t}else{  //普通属性\n\t\t\t\t\t\tif(item !== 'className'){\n\t\t\t\t\t\t\tretObj[item] = jsonObj[item];\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//子对象处理\n\t\t\t\tobjArr.forEach((item)=>{\n\t\t\t\t\tretObj[item] = handleCls(jsonObj[item]);\n\t\t\t\t});\n\n\t\t\t\t//子数组处理\n\t\t\t\tarrArr.forEach(item=>{\n\t\t\t\t\tretObj[item] = [];\n\t\t\t\t\tjsonObj[item].forEach((item1)=>{\n\t\t\t\t\t\tretObj[item].push(handleCls(item1));\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn retObj;\n\t\t\t}\n\t\t}\n\t}\t\n}\n","/// <reference path=\"nodom.ts\" />\nnamespace nodom{\n    /**\n     * @description 基础服务库\n     * @author      yanglei\n     * @since       1.0.0\n     * @create      2016-09-28\n     */\n    export class Util{\n        static generatedId:number;\n        //唯一主键\n        static genId(){\n            if(this.generatedId === undefined){\n                this.generatedId = 1;\n            }\n            return this.generatedId++;\n        }\n        \n        /******对象相关******/\n\n        /**\n         * 对象复制\n         * @param srcObj    源对象\n         * @param expKey    不复制的键正则表达式或名\n         * @returns         复制的对象\n         */\n\n        clone(srcObj:object,expKey?:string|RegExp):object{\n            let map = new WeakMap();\n            let src = this;\n            let retObj = clone(srcObj);\n            map = null;\n            return retObj;\n\n            /**\n             * clone对象\n             * @param src   待clone对象\n             * @returns     克隆后的对象\n             */\n            function clone(src){\n                let dst;\n                if(this.isObject(src)){\n                    dst = new Object();\n                    //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\n                    map.set(src,dst);\n                    Object.getOwnPropertyNames(src).forEach((prop)=>{\n                        //不克隆的键\n                        if(expKey){\n                            if(expKey.constructor === RegExp && (<RegExp>expKey).test(prop)       //正则表达式匹配的键不复制\n                                || expKey.constructor === String && expKey === prop     //被排除的键不复制\n                                ){\n                                return;\n                            }\n                        }\n                        //数组或对象继续克隆\n                        if(this.isObject(src[prop]) || this.isArray(src[prop])){\n                            let co = null;\n                            if(!map.has(src[prop])){  //clone新对象\n                                co = clone(src[prop]);\n                                //存储已克隆对象，避免重复创建或对象相互引用带来的溢出\n                                map.set(src[prop],co);\n                            }else{                    //从map中获取对象\n                                co = map.get(src[prop]);\n                            }\n                            dst[prop] = co;\n                        }else{  //直接复制\n                            dst[prop] = src[prop];\n                        }\n                    });\n                } else if(this.isArray(src)){\n                    dst = new Array();\n                    //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\n                    map.set(src,dst);\n                \n                    src.forEach(function(item,i){\n                    if(this.isObject(item) || this.isArray(item)){\n                            dst[i] = clone(item);\n                        }else{  //直接复制\n                            dst[i] = item;\n                        } \n                    });\n                }\n                return dst;\n            }\n        }\n        /**\n         * 合并多个对象并返回\n         * @param   参数数组\n         * @returns 返回对象\n         */\n        static merge(){\n            for(let i=0;i<arguments.length;i++){\n                if(!this.isObject(arguments[i])){\n                    throw new NodomError('invoke','this.merge',i+'','object');    \n                }\n            }\n\n            let retObj = Object.assign.apply(null,arguments);\n            \n            subObj(retObj);\n            return retObj;\n            //处理子对象\n            function subObj(retObj){\n                for(let o in retObj){\n                    if(this.isObject(retObj[o]) || this.isArray(retObj[o])){ //对象或数组\n                        retObj[o] = retObj[o].clone();\n                    }\n                }\n            }\n        }\n\n        \n        /**\n         * 把obj2对象所有属性赋值给obj1\n         */\n        static assign(obj1,obj2){\n            if(Object.assign){\n                Object.assign(obj1,obj2);\n            }else{\n                this.getOwnProps(obj2).forEach(function(p){\n                    obj1[p] = obj2[p];\n                });    \n            }\n            return obj1;\n        }\n\n        /**\n         * 获取对象自有属性\n         */\n        static getOwnProps(obj):Array<string>{\n            if(!obj){\n                return [];\n            }\n            return Object.getOwnPropertyNames(obj);\n        }\n        /**************对象判断相关************/\n        /**\n         * 是否为函数\n         * @param foo   检查的对象\n         * @returns     true/false\n         */\n        static isFunction(foo):boolean{\n            return foo !== undefined && foo !== null && foo.constructor === Function;\n        }\n        /**\n         * 是否为数组\n         * @param obj   检查的对象\n         * @returns     true/false\n         */\n        static isArray(obj) :boolean{\n            return Array.isArray(obj);\n        }\n\n        /**\n         * 是否为对象\n         * @param obj   检查的对象\n         * @returns true/false\n         */\n        static isObject(obj):boolean {\n            return obj !== null && obj !== undefined && obj.constructor === Object;\n        }\n\n        /**\n         * 判断是否为整数\n         * @param v 检查的值\n         * @returns true/false\n         */\n        static isInt(v):boolean {\n            return Number.isInteger(v);\n        }\n        /**\n         * 判断是否为number\n         * @param v 检查的值\n         * @returns true/false\n         */\n        static isNumber(v):boolean{\n            return typeof v === 'number';\n        }\n\n        /**\n         * 判断是否为boolean\n         * @param v 检查的值\n         * @returns true/false\n         */\n        static isBoolean(v):boolean{\n            return typeof v === 'boolean';\n        }\n        /**\n         * 判断是否为字符串\n         * @param v 检查的值\n         * @returns true/false\n         */\n        static isString(v):boolean{\n            return typeof v === 'string';\n        }\n\n        /**\n         * 是否为数字串\n         * @param v 检查的值\n         * @returns true/false\n         */\n        static isNumberString(v):boolean{\n            return /^\\d+\\.?\\d*$/.test(v);\n        }\n\n        /**\n         * 对象/字符串是否为空\n         * @param obj   检查的对象\n         * @returns     true/false\n         */\n        static isEmpty(obj):boolean{\n            if(obj === null || obj === undefined)\n                return true;\n            let tp = typeof obj;\n            if(this.isObject(obj)){\n                let keys = Object.keys(obj);\n                if(keys !== undefined){\n                    return keys.length === 0;\n                }\n            }else if(tp === 'string'){\n                return obj === '';\n            }\n            return false;\n        }\n\n\n        /***********************对象相关******************/\n\n        /**\n         * 找到符合符合属性值条件的对象（深度遍历）\n         * @param obj       待查询对象\n         * @param props     属性值对象\n         * @param one       是否满足一个条件就可以，默认false\n         */ \n        static findObjByProps(obj:object,props:object,one:boolean):Array<object>|object{\n            if(!this.isObject(obj)){\n                throw new NodomError('invoke','this.findObjByProps','0','Object');\n            }\n\n            //默认false\n            one = one || false;\n            let ps:Array<string> = this.getOwnProps(props);\n            let find:boolean = false;\n            if(one === false){  //所有条件都满足\n                find = true;\n                for(let i=0;i<ps.length;i++){\n                    let p = ps[i];\n                    if(obj[p] !== props[p]){\n                        find = false;\n                        break;\n                    }\n                }\n            }else{              //一个条件满足\n                for(let i=0;i<ps.length;i++){\n                    let p = ps[i];\n                    if(obj[p] === props[p]){\n                        find = true;\n                        break;\n                    }\n                }\n            }\n            if(find){\n                return obj;\n            }\n\n\n            //子节点查找\n            for(let p in obj){\n                let o = obj[p];\n                if(o !== null){\n                    if(this.isObject(o)){      //子对象\n                        //递归查找\n                        let oprops = this.getOwnProps(o);\n                        for(let i=0;i<oprops.length;i++){\n                            let item = o[oprops[i]];\n                            if(item !== null && this.isObject(item)){\n                                let r = this.findObjByProps(item,props,one);\n                                if(r !== null){\n                                    return r;\n                                }           \n                            }\n                        }\n                    }else if(this.isArray(o)){ //数组对象\n                        for(let i=0;i<o.length;i++){\n                            let item = o[i];\n                            if(item !== null && this.isObject(item)){\n                                let r = this.findObjByProps(item,props,one);\n                                if(r !== null){\n                                    return r;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return null;\n        }\n\n    /**********dom相关***********/\n        /**\n         * 获取dom节点\n         * @param selector  选择器\n         * @param findAll   是否获取所有，默认为false\n         * @param pview     父html element\n         * @returns         html element/null 或 nodelist或[]\n         */\n        static get(selector:string,findAll?:boolean,pview?:HTMLElement|Document):Node|NodeList{\n            pview = pview || document;\n            if(findAll === true){\n                return pview.querySelectorAll(selector);\n            }\n            return pview.querySelector(selector);\n        }\n\n        /**\n         * 追加子节点\n         * @param el    父element\n         * @param dom   要添加的dom节点或dom串\n         */\n        static append(el:HTMLElement,dom:Node|string){\n            if(this.isNode(dom)){\n                el.appendChild(<Node>dom);\n            }else if(this.isString(dom)){\n                let div:HTMLElement = this.newEl('div');\n                div.innerHTML = <string>dom;\n            }\n        }\n        /**\n         * 是否为element\n         * @param el    传入的对象\n         * @returns     true/false\n         */\n        static isEl(el:any):boolean{\n            return el instanceof HTMLElement;\n        }\n\n        /**\n         * 是否为node\n         * @param node 传入的对象\n         * @returns true/false\n         */\n        static isNode(node:any):boolean{\n            return node !== undefined && node !== null && (node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE);  \n        }\n        \n        /**\n         * 获取translate3d 数据\n         * @param view  element\n         */\n        static getTranslate(el:HTMLElement):Array<number>{\n            let tr = el.style.transform;\n            let arr;\n            if(tr && tr !== 'none'){\n                arr = [];\n                let vs:string = tr.substring(tr.indexOf('(')+1,tr.indexOf(')')-1);\n                let va:Array<string> = vs.split(',');\n                for(let i=0;i<va.length;i++){\n                    arr.push(parseInt(va[i]));\n                }\n            }\n            if(arr){\n                return arr;\n            }\n            return [0,0,0];\n        }\n\n        /**\n         * 新建dom\n         * @param tagName   标签名\n         * @param config    属性集合\n         * @param text      innerText\n         * @returns         新建的elelment\n         */\n        static newEl(tagName:string,config?:object,text?:string):HTMLElement{\n            if(!this.isString(tagName) || this.isEmpty(tagName)){\n                throw new NodomError('invoke','this.newEl','0','string');   \n            }\n            let el = document.createElement(tagName);\n            if(this.isObject(config)){\n                this.attr(el,config);\n            }else if(this.isString(text)){\n                el.innerHTML = text;\n            }\n            return el;\n        }\n        /**\n         * 新建svg element\n         * @param tagName   标签名\n         * @returns         svg element\n         */\n        static newSvgEl(tagName):HTMLElement{\n            return document.createElementNS(\"http://www.w3.org/2000/svg\",tagName);\n        }\n        /**\n         * 把srcNode替换为nodes\n         * @param srcNode       源dom\n         * @param nodes         替换的dom或dom数组\n         */\n        static replaceNode(srcNode:Node,nodes:Node|Array<Node>){\n            if(!this.isNode(srcNode)){\n                throw new NodomError('invoke','this.replaceNode','0','Node');\n            }\n            \n            if(!this.isNode(nodes) && !this.isArray(nodes)){\n                throw new NodomError('invoke1','this.replaceNode','1','Node','Node Array');\n            }\n            let pnode:Node = srcNode.parentNode;\n            let bnode:Node = srcNode.nextSibling;\n            if(pnode === null){\n                return;\n            }\n            pnode.removeChild(srcNode);\n            const nodeArr:Array<Node> = this.isArray(nodes)?<Node[]>nodes:[<Node>nodes];\n            nodeArr.forEach(function(node){\n                if(bnode === undefined || bnode === null){\n                    pnode.appendChild(node);\n                }else{\n                    pnode.insertBefore(node,bnode);\n                }\n            });\n        }\n        /**\n         * 在srcNode后面插入newNode,如果srcNode无效，则插入到第一个\n         * @param newNode   新节点或数组\n         * @param oldNode   旧节点\n         */\n        static insertAfter(newNode:Node|Array<Node>,srcNode:Node,pNode:Node){\n            if(!this.isNode(newNode)){\n                throw new NodomError('invoke','this.insertAfter','0','Node');\n            }\n            if(!this.isNode(srcNode) && !this.isNode(pNode)){\n                throw new NodomError('invoke2','this.insertAfter','1','2','Node');\n            }\n            let bNode=null;\n            //如果srcNode不存在，则添加在第一个位置\n            if(srcNode === undefined || srcNode === null){\n                bNode = pNode.firstChild;\n            }else{\n                pNode = srcNode.parentNode;\n                bNode = srcNode.nextSibling;\n            }\n            if(!this.isNode(pNode)){\n                return;\n            }\n            if(bNode === null){\n                if(this.isArray(newNode)){\n                    for(let n of <Array<Node>>newNode){\n                        if(this.isEl(n)){\n                            pNode.appendChild(n);\n                        }\n                    }\n                }else{\n                    pNode.appendChild(<Node>newNode);\n                }\n            }else{\n                if(this.isArray(newNode)){\n                    for(let n of <Array<Node>>newNode){\n                        if(this.isEl(n)){\n                            pNode.insertBefore(n,bNode);\n                        }\n                    }\n                }else{\n                    pNode.insertBefore(<Node>newNode,bNode);\n                }\n            }\n        }\n\n        /**\n         * 清空子节点\n         * @param el\n         */\n        static empty(el:HTMLElement){\n            const me = this;\n            if(!me.isEl(el)){\n                throw new NodomError('invoke','this.empty','0','Element');\n            }\n            let nodes:NodeList = el.childNodes;\n            for(let i=nodes.length-1;i>=0;i--){\n                el.removeChild(nodes[i]);\n            }\n        }\n        /**\n         * 删除节点\n         * @param node html node\n         */\n        static remove(node:Node){\n            const me = this;\n            if(!me.isNode(node)){\n                throw new NodomError('invoke','this.remove','0','Node');\n            }\n\n            if(node.parentNode !== null){\n                node.parentNode.removeChild(node);\n            }\n        }\n\n        \n        /**\n         * 获取／设置属性\n         * @param el    element\n         * @param param 属性名，设置多个属性时用对象\n         * @param value 属性值，获取属性时不需要设置\n         * @returns     属性值\n         */\n        static attr(el:HTMLElement,param:string|object,value?:any):any{\n            const me = this;\n            if(!me.isEl(el)){\n                throw new NodomError('invoke','this.attr','0','Element');\n            }\n            if(this.isEmpty(param)){\n                throw new NodomError('invoke','this.attr','1','string','object');   \n            }\n            if(value === undefined || value === null){\n                if(this.isObject(param)){ //设置多个属性\n                    this.getOwnProps(param).forEach(function(k){\n                        if(k === 'value'){\n                            el[k] = param[k];\n                        }else{\n                            el.setAttribute(k,param[k]);\n                        }\n                    });\n                }else if(this.isString(param)){ //获取属性\n                    if(param === 'value'){\n                        return param[value];\n                    }\n                    return el.getAttribute(<string>param);\n                }\n            }else { //设置属性\n                if(param === 'value'){\n                        el[param] = value;\n                }else{\n                    el.setAttribute(<string>param,value);\n                }\n            }\n        }\n        \n\n        /**\n         * 获取或设置宽度\n         * @param el        elment\n         * @param value     如果为false，则获取外部width(含padding)，否则获取内部width，如果为数字，则设置width=value + px\n         */\n        static width(el:HTMLElement,value?:number|boolean){\n            if(!this.isEl(el)){\n                throw new NodomError('invoke','nodom.width','0','Element');\n            }\n            if(this.isNumber(value)){\n                el.style.width = value + 'px';\n            }else{\n                let compStyle;\n                //ie 9+ firefox chrome safari\n                if(window.getComputedStyle){\n                    compStyle = window.getComputedStyle(el,null);\n                }\n                if(!compStyle){\n                    return null;\n                }\n                let w = parseInt(compStyle['width']);\n                if(value === true){\n                    let pw = parseInt(compStyle['paddingLeft'])+parseInt(compStyle['paddingRight']);\n                    w -= pw;    \n                }\n                return w;\n            }\n        }\n\n        /**\n         * 获取或设置高度\n         * @param el        elment\n         * @param value     如果为false，则获取外部height(含padding)，否则获取内部height，如果为数字，则设置height=value + px\n         */\n        static height(el:HTMLElement,value:number|boolean){\n            if(!this.isEl(el)){\n                throw new NodomError('invoke','this.height','0','Element');\n            }\n            if(this.isNumber(value)){\n                el.style.height = value + 'px';\n            }else{\n                let compStyle;\n                //ie 9+ firefox chrome safari\n                if(window.getComputedStyle){\n                    compStyle = window.getComputedStyle(el,null);\n                }\n                if(!compStyle){\n                    return null;\n                }\n                let w = parseInt(compStyle['height']);\n                if(value === true){\n                    let pw = parseInt(compStyle['paddingTop'])+parseInt(compStyle['paddingBottom']);\n                    w -= pw;    \n                }\n                return w;\n            }\n        }\n        /**\n         * 添加class\n         * @param el    html element\n         * @param cls   类名\n         */\n        static addClass(el:HTMLElement,cls:string){\n            if(!this.isEl(el)){\n                throw new NodomError('invoke','this.addClass','0','Element');\n            }\n            if(this.isEmpty(cls)){\n                throw new NodomError('invoke','this.addClass','1','string');   \n            }\n\n            let cn:string = el.className.trim();\n            if(this.isEmpty(cn)){\n                el.className = cls;\n            }else{\n                let arr = cn.split(/\\s+/);\n                //遍历class数组，如果存在cls，则不操作\n                for(let i=0;i<arr.length;i++){\n                    if(arr[i] === cls){\n                        return;\n                    }\n                }\n                //追加cls\n                arr.push(cls);\n                el.className = arr.join(' ');\n            }\n        }\n        /**\n         * 移除cls\n         * @param el    html element\n         * @param cls   类名\n         */\n        static removeClass(el:HTMLElement,cls:string){\n            if(!this.isEl(el)){\n                throw new NodomError('invoke','this.removeClass','0','Element');\n            }\n            if(this.isEmpty(cls)){\n                throw new NodomError('invoke','this.removeClass','1','string');   \n            }\n\n            let cn:string = el.className.trim();\n            if(!this.isEmpty(cn)){\n                let arr = cn.split(/\\s+/);\n                //遍历class数组，如果存在cls，则移除\n                for(let i=0;i<arr.length;i++){\n                    if(arr[i] === cls){\n                        arr.splice(i,1);\n                        el.className = arr.join(' ');\n                        return;\n                    }\n                }\n            }\n        }\n\n        /******日期相关******/\n        /**\n         * 日期格式化\n         * @param srcDate   时间戳串\n         * @param format    日期格式\n         * @returns          日期串\n         */\n        static formatDate(srcDate:string|number,format:string):string{\n            //时间戳\n            let timeStamp:number;\n            if(this.isString(srcDate)){\n                //排除日期格式串,只处理时间戳\n                let reg = new RegExp(/^\\d+$/);\n                if(reg.test(<string>srcDate) === true){\n                    timeStamp = parseInt(<string>srcDate);\n                }\n            }else if(this.isNumber(srcDate)){\n                timeStamp = <number>srcDate;\n            }else{\n                throw new NodomError('invoke','this.formatDate','0','date string','date');\n            }\n                \n            //得到日期\n            let date:Date = new Date(timeStamp);\n            // invalid date\n            if(isNaN(date.getDay())){\n                return '';\n            }\n\n            let o = {\n                \"M+\" : date.getMonth()+1, //月份\n                \"d+\" : date.getDate(), //日\n                \"h+\" : date.getHours()%12 === 0 ? 12 : date.getHours()%12, //小时\n                \"H+\" : date.getHours(), //小时\n                \"m+\" : date.getMinutes(), //分\n                \"s+\" : date.getSeconds(), //秒\n                \"q+\" : Math.floor((date.getMonth()+3)/3), //季度\n                \"S\" : date.getMilliseconds() //毫秒\n            };\n            let week = {\n                \"0\" : \"日\",\n                \"1\" : \"一\",\n                \"2\" : \"二\",\n                \"3\" : \"三\",\n                \"4\" : \"四\",\n                \"5\" : \"五\",\n                \"6\" : \"六\"\n            };\n\n            //年\n            if(/(y+)/.test(format)){\n                format=format.replace(RegExp.$1, (date.getFullYear()+\"\").substr(4 - RegExp.$1.length));\n            }\n            //月日\n            this.getOwnProps(o).forEach(function(k){\n                if(new RegExp(\"(\"+ k +\")\").test(format)){\n                    format = format.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n                }\n            });\n\n            //星期\n            if(/(E+)/.test(format)){\n                format=format.replace(RegExp.$1, ((RegExp.$1.length>1) ? (RegExp.$1.length>2 ? \"/u661f/u671f\" : \"/u5468\") : \"\") + week[date.getDay() + \"\"]);\n            }\n            return format;\n        }\n\n        /******字符串相关*****/\n        /**\n         * 编译字符串，把{n}替换成带入值\n         * @param str 待编译的字符串\n         * @param args1,args2,args3,... 待替换的参数\n         * @returns 转换后的消息\n         */\n        static compileStr(src:string,p1?:any,p2?:any,p3?:any,p4?:any,p5?:any):string{\n            let reg:RegExp = new RegExp(/\\{.+?\\}/);\n            let r:RegExpExecArray;\n            let args = arguments;\n            let str = args[0];\n            while((r=reg.exec(str))!==null){\n                let rep;\n                let sIndex = r[0].substr(1,r[0].length-2);\n                let pIndex = parseInt(sIndex)+1;\n                if(args[pIndex] !== undefined){\n                    rep = args[pIndex];\n                }else{\n                    rep = '';\n                }\n                str = str.replace(reg,rep);\n            }\n            return str;\n        }\n        \n        /**\n         * 为字符串值两端添加引号\n         * @param srcStr    带转换的字符串\n         * @param quot      引号 \" 或 ' 或 `\n         */\n        static addStrQuot(srcStr:string,quot?:string){\n            srcStr = srcStr.replace(/\\'/g,'\\\\\\'');\n            srcStr = srcStr.replace(/\\\"/g,'\\\\\\\"');\n            srcStr = srcStr.replace(/\\`/g,'\\\\\\`');\n            quot = quot || '\"';\n            srcStr  = quot + srcStr + quot;\n            return srcStr;\n        }\n\n        /**\n         * 函数调用\n         * @param foo   函数\n         * @param obj   this指向\n         * @param args  参数数组\n         */\n        static apply(foo:Function,obj:any,args?:Array<any>):any{\n            return Reflect.apply(foo,obj,args);\n        }\n    }\n}\n\n"],"sourceRoot":""}